// Generated by @wagmi/cli@1.1.0 on 6/6/2023 at 6:03:23 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  Address,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPayoutStrategy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPayoutStrategyABI = [
  { type: "event", anonymous: false, inputs: [], name: "ReadyForPayout" },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "init",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isReadyForPayout",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundAddress",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tokenAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPayoutStrategyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPayoutStrategyFactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newPayoutImplementation",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updatePayoutImplementation",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockErc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "initialSupply", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockRevertingReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockRevertingReceiverABI = [
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockRoundImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockRoundImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ApplicationMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "index",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "status",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "ApplicationStatusesUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsStartTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "MatchAmountUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "applicationIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "applicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "NewProjectApplication",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "matchAmountAfterFees",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "protocolFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "roundFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PayFeeAndEscrowFundsToPayoutContract",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ProjectsMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeeAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundFeeAddressUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeePercentage",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
    ],
    name: "RoundFeePercentageUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "RoundMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundStartTimeUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "alloSettings",
    outputs: [
      { name: "", internalType: "contract AlloSettings", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "applicationStatusesBitMap",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "applications",
    outputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      { name: "applicationIndex", internalType: "uint256", type: "uint256" },
      {
        name: "metaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "bytes32", type: "bytes32" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "applicationsIndexesByProjectID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "applyToRound",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "projectID", internalType: "bytes32", type: "bytes32" }],
    name: "getApplicationIndexesByProjectID",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "applicationIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "getApplicationStatus",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "_alloSettings", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "matchAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "mockSetReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextApplicationIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutStrategy",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutStrategyFactory",
    outputs: [
      {
        name: "",
        internalType: "contract IPayoutStrategyFactory",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeeAddress",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeePercentage",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "statuses",
        internalType: "struct IRoundImplementation.ApplicationStatus[]",
        type: "tuple[]",
        components: [
          { name: "index", internalType: "uint256", type: "uint256" },
          { name: "statusRow", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "setApplicationStatuses",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateApplicationMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newAmount", internalType: "uint256", type: "uint256" }],
    name: "updateMatchAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newFeeAddress",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundFeeAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newFeePercentage", internalType: "uint32", type: "uint32" },
    ],
    name: "updateRoundFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateRoundMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsStartTime",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "newApplicationsEndTime",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "newRoundStartTime", internalType: "uint256", type: "uint256" },
      { name: "newRoundEndTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateStartAndEndTimes",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategy",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategyFactory",
    outputs: [
      {
        name: "",
        internalType: "contract IVotingStrategyFactory",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "recipent", internalType: "address payable", type: "address" },
    ],
    name: "withdraw",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProgramFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const programFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "programContractAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "ProgramContractUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "programContractAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "programImplementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ProgramCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "programContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newProgramContract", internalType: "address", type: "address" },
    ],
    name: "updateProgramContract",
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const programFactoryAddress = {
  5: "0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0",
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const programFactoryConfig = {
  address: programFactoryAddress,
  abi: programFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProgramImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const programImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "MetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROGRAM_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateMetaPtr",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProjectRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export const projectRegistryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "metaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "MetadataUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnerAdded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnerRemoved",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ProjectCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "uint256", type: "uint256" },
      { name: "newOwner", internalType: "address", type: "address" },
    ],
    name: "addProjectOwner",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "metadata",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "createProject",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "projectID", internalType: "uint256", type: "uint256" }],
    name: "getProjectOwners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "projectID", internalType: "uint256", type: "uint256" }],
    name: "projectOwnersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "projects",
    outputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      {
        name: "metadata",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "projectsCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "projectsOwners",
    outputs: [{ name: "count", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "uint256", type: "uint256" },
      { name: "prevOwner", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "removeProjectOwner",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "uint256", type: "uint256" },
      {
        name: "metadata",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateProjectMetadata",
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export const projectRegistryAddress = {
  5: "0xa71864fAd36439C50924359ECfF23Bb185FFDf21",
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export const projectRegistryConfig = {
  address: projectRegistryAddress,
  abi: projectRegistryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRoundFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRoundFactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "ownedBy", internalType: "address", type: "address" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newAlloSettings", internalType: "address", type: "address" },
    ],
    name: "updateAlloSettings",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundImplementation",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundImplementation",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRoundImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRoundImplementationABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "applyToRound",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "projectID", internalType: "bytes32", type: "bytes32" }],
    name: "getApplicationIndexesByProjectID",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "applicationIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "getApplicationStatus",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "_alloSettings", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "statuses",
        internalType: "struct IRoundImplementation.ApplicationStatus[]",
        type: "tuple[]",
        components: [
          { name: "index", internalType: "uint256", type: "uint256" },
          { name: "statusRow", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "setApplicationStatuses",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateApplicationMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newAmount", internalType: "uint256", type: "uint256" }],
    name: "updateMatchAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newFeeAddress",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundFeeAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newFeePercentage", internalType: "uint32", type: "uint32" },
    ],
    name: "updateRoundFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateRoundMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsStartTime",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "newApplicationsEndTime",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "newRoundStartTime", internalType: "uint256", type: "uint256" },
      { name: "newRoundEndTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateStartAndEndTimes",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "recipent", internalType: "address payable", type: "address" },
    ],
    name: "withdraw",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RoundFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const roundFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "alloSettings",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "AlloSettingsUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "ownedBy",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "roundImplementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoundCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundImplementation",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundImplementationUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "alloSettings",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "ownedBy", internalType: "address", type: "address" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newAlloSettings", internalType: "address", type: "address" },
    ],
    name: "updateAlloSettings",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundImplementation",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundImplementation",
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const roundFactoryAddress = {
  5: "0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0",
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export const roundFactoryConfig = {
  address: roundFactoryAddress,
  abi: roundFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RoundImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const roundImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ApplicationMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "index",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "status",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "ApplicationStatusesUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsStartTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "MatchAmountUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "projectID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "applicationIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "applicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "NewProjectApplication",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "matchAmountAfterFees",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "protocolFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "roundFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PayFeeAndEscrowFundsToPayoutContract",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ProjectsMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeeAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundFeeAddressUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeePercentage",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
    ],
    name: "RoundFeePercentageUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "RoundMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundStartTimeUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "alloSettings",
    outputs: [
      { name: "", internalType: "contract AlloSettings", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "applicationStatusesBitMap",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "applications",
    outputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      { name: "applicationIndex", internalType: "uint256", type: "uint256" },
      {
        name: "metaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "bytes32", type: "bytes32" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "applicationsIndexesByProjectID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "applyToRound",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "projectID", internalType: "bytes32", type: "bytes32" }],
    name: "getApplicationIndexesByProjectID",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "applicationIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "getApplicationStatus",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "_alloSettings", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "matchAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextApplicationIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutStrategy",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutStrategyFactory",
    outputs: [
      {
        name: "",
        internalType: "contract IPayoutStrategyFactory",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeeAddress",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeePercentage",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "statuses",
        internalType: "struct IRoundImplementation.ApplicationStatus[]",
        type: "tuple[]",
        components: [
          { name: "index", internalType: "uint256", type: "uint256" },
          { name: "statusRow", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "setApplicationStatuses",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateApplicationMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newAmount", internalType: "uint256", type: "uint256" }],
    name: "updateMatchAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newFeeAddress",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundFeeAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newFeePercentage", internalType: "uint32", type: "uint32" },
    ],
    name: "updateRoundFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateRoundMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsStartTime",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "newApplicationsEndTime",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "newRoundStartTime", internalType: "uint256", type: "uint256" },
      { name: "newRoundEndTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateStartAndEndTimes",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategy",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategyFactory",
    outputs: [
      {
        name: "",
        internalType: "contract IVotingStrategyFactory",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "recipent", internalType: "address payable", type: "address" },
    ],
    name: "withdraw",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AlloSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const alloSettingsABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "protocolFeePercentage",
        internalType: "uint24",
        type: "uint24",
        indexed: false,
      },
    ],
    name: "ProtocolFeePercentageUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "protocolTreasuryAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "ProtocolTreasuryUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DENOMINATOR",
    outputs: [{ name: "", internalType: "uint24", type: "uint24" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "protocolFeePercentage",
    outputs: [{ name: "", internalType: "uint24", type: "uint24" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "protocolTreasury",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_protocolFeePercentage",
        internalType: "uint24",
        type: "uint24",
      },
    ],
    name: "updateProtocolFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_protocolTreasury",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateProtocolTreasury",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotingStrategy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotingStrategyABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "init",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_encodedVotes", internalType: "bytes[]", type: "bytes[]" },
      { name: "_voterAddress", internalType: "address", type: "address" },
    ],
    name: "vote",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotingStrategyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotingStrategyFactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newVotingContract", internalType: "address", type: "address" },
    ],
    name: "updateVotingContract",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlEnumerableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlEnumerableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MulticallUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicallUpgradeableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyProgramFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyProgramFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "programContractAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "ProgramContractUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "programContractAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ProgramCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "newFoobar", internalType: "string", type: "string" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "foobar",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "programContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newProgramContract", internalType: "address", type: "address" },
    ],
    name: "updateProgramContract",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyProgramImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyProgramImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "MetadataUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROGRAM_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "foobar",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "newFoobar", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateMetaPtr",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyRoundFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyRoundFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundContractUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "ownedBy",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoundCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "ownedBy", internalType: "address", type: "address" },
      { name: "newFoobar", internalType: "string", type: "string" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "foobar",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newRoundContract", internalType: "address", type: "address" },
    ],
    name: "updateRoundContract",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyRoundFactoryV1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyRoundFactoryV1ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "protocolFeePercentage",
        internalType: "uint8",
        type: "uint8",
        indexed: false,
      },
    ],
    name: "ProtocolFeePercentageUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "protocolTreasuryAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "ProtocolTreasuryUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundContractUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "ownedBy",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "roundImplementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoundCreated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "ownedBy", internalType: "address", type: "address" },
    ],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "protocolFeePercentage",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "protocolTreasury",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newProtocolFeePercentage",
        internalType: "uint8",
        type: "uint8",
      },
    ],
    name: "updateProtocolFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newProtocolTreasury",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateProtocolTreasury",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundContract",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundContract",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyRoundImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyRoundImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ApplicationMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsStartTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "project",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "applicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "NewProjectApplication",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ProjectsMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "RoundMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundStartTimeUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "applyToRound",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "foobar",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "newFoobar", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "projectsMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateApplicationMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsEndTime",
        internalType: "uint256",
        type: "uint256",
      },
    ],
    name: "updateApplicationsEndTime",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsStartTime",
        internalType: "uint256",
        type: "uint256",
      },
    ],
    name: "updateApplicationsStartTime",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newProjectsMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateProjectsMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newRoundEndTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateRoundEndTime",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateRoundMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newRoundStartTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateRoundStartTime",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategy",
    outputs: [
      { name: "", internalType: "contract IVotingStrategy", type: "address" },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyRoundImplementationV1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyRoundImplementationV1ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ApplicationMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ApplicationsStartTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "MatchAmountUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "project",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "applicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "NewProjectApplication",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "matchAmountAfterFees",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "protocolFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "roundFeeAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PayFeeAndEscrowFundsToPayoutContract",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "ProjectsMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundEndTimeUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeeAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RoundFeeAddressUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "roundFeePercentage",
        internalType: "uint8",
        type: "uint8",
        indexed: false,
      },
    ],
    name: "RoundFeePercentageUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
      {
        name: "newMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "RoundMetaPtrUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RoundStartTimeUpdated",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "applicationsStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "projectID", internalType: "bytes32", type: "bytes32" },
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "applyToRound",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedParameters", internalType: "bytes", type: "bytes" },
      { name: "_roundFactory", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "matchAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutStrategy",
    outputs: [
      { name: "", internalType: "contract IPayoutStrategy", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "projectsMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundEndTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFactory",
    outputs: [
      {
        name: "",
        internalType: "contract DummyRoundFactoryV1",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeeAddress",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundFeePercentage",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundStartTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateApplicationMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newAmount", internalType: "uint256", type: "uint256" }],
    name: "updateMatchAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newProjectsMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateProjectsMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newFeeAddress",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updateRoundFeeAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newFeePercentage", internalType: "uint8", type: "uint8" },
    ],
    name: "updateRoundFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newRoundMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updateRoundMetaPtr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newApplicationsStartTime",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "newApplicationsEndTime",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "newRoundStartTime", internalType: "uint256", type: "uint256" },
      { name: "newRoundEndTime", internalType: "uint256", type: "uint256" },
    ],
    name: "updateStartAndEndTimes",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingStrategy",
    outputs: [
      { name: "", internalType: "contract IVotingStrategy", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "recipent", internalType: "address payable", type: "address" },
    ],
    name: "withdraw",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MerklePayoutStrategyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export const merklePayoutStrategyFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "payoutContractAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "payoutImplementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "PayoutContractCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "merklePayoutStrategyAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "PayoutImplementationUpdated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "payoutImplementation",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newPayoutImplementation",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "updatePayoutImplementation",
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export const merklePayoutStrategyFactoryAddress = {
  5: "0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe",
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export const merklePayoutStrategyFactoryConfig = {
  address: merklePayoutStrategyFactoryAddress,
  abi: merklePayoutStrategyFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MerklePayoutStrategyImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const merklePayoutStrategyImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "BatchPayoutSuccessful",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "merkleRoot",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
      {
        name: "distributionMetaPtr",
        internalType: "struct MetaPtr",
        type: "tuple",
        components: [
          { name: "protocol", internalType: "uint256", type: "uint256" },
          { name: "pointer", internalType: "string", type: "string" },
        ],
        indexed: false,
      },
    ],
    name: "DistributionUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "grantee",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "projectId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "FundsDistributed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "withdrawAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "FundsWithdrawn",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  { type: "event", anonymous: false, inputs: [], name: "ReadyForPayout" },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ROUND_OPERATOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "distributionMetaPtr",
    outputs: [
      { name: "protocol", internalType: "uint256", type: "uint256" },
      { name: "pointer", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "hasBeenDistributed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "init",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isDistributionSet",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isReadyForPayout",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "merkleRoot",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "_distributions",
        internalType:
          "struct MerklePayoutStrategyImplementation.Distribution[]",
        type: "tuple[]",
        components: [
          { name: "index", internalType: "uint256", type: "uint256" },
          { name: "grantee", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "projectId", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "payout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundAddress",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "setReadyForPayout",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tokenAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "encodedDistribution", internalType: "bytes", type: "bytes" },
    ],
    name: "updateDistribution",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "withdrawAddress",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QuadraticFundingVotingStrategyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export const quadraticFundingVotingStrategyFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "votingContractAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "votingImplementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "VotingContractCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "votingContractAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "VotingContractUpdated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "create",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newVotingContract", internalType: "address", type: "address" },
    ],
    name: "updateVotingContract",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export const quadraticFundingVotingStrategyFactoryAddress = {
  5: "0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38",
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export const quadraticFundingVotingStrategyFactoryConfig = {
  address: quadraticFundingVotingStrategyFactoryAddress,
  abi: quadraticFundingVotingStrategyFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QuadraticFundingVotingStrategyImplementation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const quadraticFundingVotingStrategyImplementationABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "voter",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "grantAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "projectId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "applicationIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "roundAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "Voted",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "init",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "roundAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "encodedVotes", internalType: "bytes[]", type: "bytes[]" },
      { name: "voterAddress", internalType: "address", type: "address" },
    ],
    name: "vote",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function useIPayoutStrategyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPayoutStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPayoutStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iPayoutStrategyABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPayoutStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useIPayoutStrategyRoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<typeof iPayoutStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPayoutStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iPayoutStrategyABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof iPayoutStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"isReadyForPayout"`.
 */
export function useIPayoutStrategyIsReadyForPayout<
  TFunctionName extends "isReadyForPayout",
  TSelectData = ReadContractResult<typeof iPayoutStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPayoutStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iPayoutStrategyABI,
    functionName: "isReadyForPayout",
    ...config,
  } as UseContractReadConfig<
    typeof iPayoutStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"roundAddress"`.
 */
export function useIPayoutStrategyRoundAddress<
  TFunctionName extends "roundAddress",
  TSelectData = ReadContractResult<typeof iPayoutStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPayoutStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iPayoutStrategyABI,
    functionName: "roundAddress",
    ...config,
  } as UseContractReadConfig<
    typeof iPayoutStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"tokenAddress"`.
 */
export function useIPayoutStrategyTokenAddress<
  TFunctionName extends "tokenAddress",
  TSelectData = ReadContractResult<typeof iPayoutStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPayoutStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iPayoutStrategyABI,
    functionName: "tokenAddress",
    ...config,
  } as UseContractReadConfig<
    typeof iPayoutStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function useIPayoutStrategyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iPayoutStrategyABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iPayoutStrategyABI, TFunctionName, TMode>({
    abi: iPayoutStrategyABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"init"`.
 */
export function useIPayoutStrategyInit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyABI,
          "init"
        >["request"]["abi"],
        "init",
        TMode
      > & { functionName?: "init" }
    : UseContractWriteConfig<typeof iPayoutStrategyABI, "init", TMode> & {
        abi?: never;
        functionName?: "init";
      } = {} as any,
) {
  return useContractWrite<typeof iPayoutStrategyABI, "init", TMode>({
    abi: iPayoutStrategyABI,
    functionName: "init",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useIPayoutStrategySetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof iPayoutStrategyABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof iPayoutStrategyABI,
    "setReadyForPayout",
    TMode
  >({
    abi: iPayoutStrategyABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function usePrepareIPayoutStrategyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPayoutStrategyABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPayoutStrategyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareIPayoutStrategyInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPayoutStrategyABI, "init">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyABI,
    functionName: "init",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPayoutStrategyABI, "init">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareIPayoutStrategySetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPayoutStrategyABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPayoutStrategyABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function useIPayoutStrategyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iPayoutStrategyABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iPayoutStrategyABI,
    ...config,
  } as UseContractEventConfig<typeof iPayoutStrategyABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPayoutStrategyABI}__ and `eventName` set to `"ReadyForPayout"`.
 */
export function useIPayoutStrategyReadyForPayoutEvent(
  config: Omit<
    UseContractEventConfig<typeof iPayoutStrategyABI, "ReadyForPayout">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iPayoutStrategyABI,
    eventName: "ReadyForPayout",
    ...config,
  } as UseContractEventConfig<typeof iPayoutStrategyABI, "ReadyForPayout">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__.
 */
export function useIPayoutStrategyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iPayoutStrategyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof iPayoutStrategyFactoryABI,
    TFunctionName,
    TMode
  >({ abi: iPayoutStrategyFactoryABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useIPayoutStrategyFactoryCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<
        typeof iPayoutStrategyFactoryABI,
        "create",
        TMode
      > & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof iPayoutStrategyFactoryABI, "create", TMode>({
    abi: iPayoutStrategyFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useIPayoutStrategyFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof iPayoutStrategyFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof iPayoutStrategyFactoryABI,
    "initialize",
    TMode
  >({
    abi: iPayoutStrategyFactoryABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"updatePayoutImplementation"`.
 */
export function useIPayoutStrategyFactoryUpdatePayoutImplementation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPayoutStrategyFactoryABI,
          "updatePayoutImplementation"
        >["request"]["abi"],
        "updatePayoutImplementation",
        TMode
      > & { functionName?: "updatePayoutImplementation" }
    : UseContractWriteConfig<
        typeof iPayoutStrategyFactoryABI,
        "updatePayoutImplementation",
        TMode
      > & {
        abi?: never;
        functionName?: "updatePayoutImplementation";
      } = {} as any,
) {
  return useContractWrite<
    typeof iPayoutStrategyFactoryABI,
    "updatePayoutImplementation",
    TMode
  >({
    abi: iPayoutStrategyFactoryABI,
    functionName: "updatePayoutImplementation",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__.
 */
export function usePrepareIPayoutStrategyFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPayoutStrategyFactoryABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPayoutStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareIPayoutStrategyFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPayoutStrategyFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPayoutStrategyFactoryABI,
    "create"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIPayoutStrategyFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPayoutStrategyFactoryABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyFactoryABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPayoutStrategyFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__ and `functionName` set to `"updatePayoutImplementation"`.
 */
export function usePrepareIPayoutStrategyFactoryUpdatePayoutImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPayoutStrategyFactoryABI,
      "updatePayoutImplementation"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPayoutStrategyFactoryABI,
    functionName: "updatePayoutImplementation",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPayoutStrategyFactoryABI,
    "updatePayoutImplementation"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useMockErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockErc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, TFunctionName, TMode>({
    abi: mockErc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useMockErc20Approve<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mockErc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "approve", TMode>({
    abi: mockErc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mockErc20ABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "decreaseAllowance", TMode>({
    abi: mockErc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mockErc20ABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "increaseAllowance", TMode>({
    abi: mockErc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useMockErc20Mint<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mockErc20ABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "mint", TMode>({
    abi: mockErc20ABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockErc20Transfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mockErc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "transfer", TMode>({
    abi: mockErc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof mockErc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof mockErc20ABI, "transferFrom", TMode>({
    abi: mockErc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function usePrepareMockErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockErc20Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function useMockRoundImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMockRoundImplementationDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useMockRoundImplementationRoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"VERSION"`.
 */
export function useMockRoundImplementationVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"alloSettings"`.
 */
export function useMockRoundImplementationAlloSettings<
  TFunctionName extends "alloSettings",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "alloSettings",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applicationMetaPtr"`.
 */
export function useMockRoundImplementationApplicationMetaPtr<
  TFunctionName extends "applicationMetaPtr",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applicationMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applicationStatusesBitMap"`.
 */
export function useMockRoundImplementationApplicationStatusesBitMap<
  TFunctionName extends "applicationStatusesBitMap",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applicationStatusesBitMap",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applications"`.
 */
export function useMockRoundImplementationApplications<
  TFunctionName extends "applications",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applications",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applicationsEndTime"`.
 */
export function useMockRoundImplementationApplicationsEndTime<
  TFunctionName extends "applicationsEndTime",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applicationsEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applicationsIndexesByProjectID"`.
 */
export function useMockRoundImplementationApplicationsIndexesByProjectId<
  TFunctionName extends "applicationsIndexesByProjectID",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applicationsIndexesByProjectID",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applicationsStartTime"`.
 */
export function useMockRoundImplementationApplicationsStartTime<
  TFunctionName extends "applicationsStartTime",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "applicationsStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"getApplicationIndexesByProjectID"`.
 */
export function useMockRoundImplementationGetApplicationIndexesByProjectId<
  TFunctionName extends "getApplicationIndexesByProjectID",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "getApplicationIndexesByProjectID",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"getApplicationStatus"`.
 */
export function useMockRoundImplementationGetApplicationStatus<
  TFunctionName extends "getApplicationStatus",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "getApplicationStatus",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMockRoundImplementationGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useMockRoundImplementationGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useMockRoundImplementationGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMockRoundImplementationHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"matchAmount"`.
 */
export function useMockRoundImplementationMatchAmount<
  TFunctionName extends "matchAmount",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "matchAmount",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"nextApplicationIndex"`.
 */
export function useMockRoundImplementationNextApplicationIndex<
  TFunctionName extends "nextApplicationIndex",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "nextApplicationIndex",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"payoutStrategy"`.
 */
export function useMockRoundImplementationPayoutStrategy<
  TFunctionName extends "payoutStrategy",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "payoutStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"payoutStrategyFactory"`.
 */
export function useMockRoundImplementationPayoutStrategyFactory<
  TFunctionName extends "payoutStrategyFactory",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "payoutStrategyFactory",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"roundEndTime"`.
 */
export function useMockRoundImplementationRoundEndTime<
  TFunctionName extends "roundEndTime",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "roundEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"roundFeeAddress"`.
 */
export function useMockRoundImplementationRoundFeeAddress<
  TFunctionName extends "roundFeeAddress",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "roundFeeAddress",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"roundFeePercentage"`.
 */
export function useMockRoundImplementationRoundFeePercentage<
  TFunctionName extends "roundFeePercentage",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "roundFeePercentage",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"roundMetaPtr"`.
 */
export function useMockRoundImplementationRoundMetaPtr<
  TFunctionName extends "roundMetaPtr",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "roundMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"roundStartTime"`.
 */
export function useMockRoundImplementationRoundStartTime<
  TFunctionName extends "roundStartTime",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "roundStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockRoundImplementationSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"token"`.
 */
export function useMockRoundImplementationToken<
  TFunctionName extends "token",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"votingStrategy"`.
 */
export function useMockRoundImplementationVotingStrategy<
  TFunctionName extends "votingStrategy",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "votingStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"votingStrategyFactory"`.
 */
export function useMockRoundImplementationVotingStrategyFactory<
  TFunctionName extends "votingStrategyFactory",
  TSelectData = ReadContractResult<
    typeof mockRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockRoundImplementationABI,
    functionName: "votingStrategyFactory",
    ...config,
  } as UseContractReadConfig<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function useMockRoundImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    TFunctionName,
    TMode
  >({ abi: mockRoundImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function useMockRoundImplementationApplyToRound<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "applyToRound"
        >["request"]["abi"],
        "applyToRound",
        TMode
      > & { functionName?: "applyToRound" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "applyToRound",
        TMode
      > & {
        abi?: never;
        functionName?: "applyToRound";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "applyToRound",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMockRoundImplementationGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "grantRole",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useMockRoundImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "initialize",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"mockSetReadyForPayout"`.
 */
export function useMockRoundImplementationMockSetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "mockSetReadyForPayout"
        >["request"]["abi"],
        "mockSetReadyForPayout",
        TMode
      > & { functionName?: "mockSetReadyForPayout" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "mockSetReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "mockSetReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "mockSetReadyForPayout",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "mockSetReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"multicall"`.
 */
export function useMockRoundImplementationMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "multicall"
        >["request"]["abi"],
        "multicall",
        TMode
      > & { functionName?: "multicall" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "multicall",
        TMode
      > & {
        abi?: never;
        functionName?: "multicall";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "multicall",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "multicall",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMockRoundImplementationRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "renounceRole",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMockRoundImplementationRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "revokeRole",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function useMockRoundImplementationSetApplicationStatuses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "setApplicationStatuses"
        >["request"]["abi"],
        "setApplicationStatuses",
        TMode
      > & { functionName?: "setApplicationStatuses" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "setApplicationStatuses",
        TMode
      > & {
        abi?: never;
        functionName?: "setApplicationStatuses";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "setApplicationStatuses",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useMockRoundImplementationSetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "setReadyForPayout",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function useMockRoundImplementationUpdateApplicationMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateApplicationMetaPtr"
        >["request"]["abi"],
        "updateApplicationMetaPtr",
        TMode
      > & { functionName?: "updateApplicationMetaPtr" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateApplicationMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateApplicationMetaPtr",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function useMockRoundImplementationUpdateMatchAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateMatchAmount"
        >["request"]["abi"],
        "updateMatchAmount",
        TMode
      > & { functionName?: "updateMatchAmount" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateMatchAmount",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMatchAmount";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateMatchAmount",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function useMockRoundImplementationUpdateRoundFeeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateRoundFeeAddress"
        >["request"]["abi"],
        "updateRoundFeeAddress",
        TMode
      > & { functionName?: "updateRoundFeeAddress" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateRoundFeeAddress",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeeAddress";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateRoundFeeAddress",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function useMockRoundImplementationUpdateRoundFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateRoundFeePercentage"
        >["request"]["abi"],
        "updateRoundFeePercentage",
        TMode
      > & { functionName?: "updateRoundFeePercentage" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateRoundFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateRoundFeePercentage",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function useMockRoundImplementationUpdateRoundMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateRoundMetaPtr"
        >["request"]["abi"],
        "updateRoundMetaPtr",
        TMode
      > & { functionName?: "updateRoundMetaPtr" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateRoundMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateRoundMetaPtr",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function useMockRoundImplementationUpdateStartAndEndTimes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "updateStartAndEndTimes"
        >["request"]["abi"],
        "updateStartAndEndTimes",
        TMode
      > & { functionName?: "updateStartAndEndTimes" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "updateStartAndEndTimes",
        TMode
      > & {
        abi?: never;
        functionName?: "updateStartAndEndTimes";
      } = {} as any,
) {
  return useContractWrite<
    typeof mockRoundImplementationABI,
    "updateStartAndEndTimes",
    TMode
  >({
    abi: mockRoundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function useMockRoundImplementationVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "vote",
        TMode
      > & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof mockRoundImplementationABI, "vote", TMode>({
    abi: mockRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function useMockRoundImplementationWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockRoundImplementationABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<
        typeof mockRoundImplementationABI,
        "withdraw",
        TMode
      > & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof mockRoundImplementationABI, "withdraw", TMode>(
    {
      abi: mockRoundImplementationABI,
      functionName: "withdraw",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function usePrepareMockRoundImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function usePrepareMockRoundImplementationApplyToRound(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "applyToRound"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "applyToRound"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMockRoundImplementationGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMockRoundImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"mockSetReadyForPayout"`.
 */
export function usePrepareMockRoundImplementationMockSetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "mockSetReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "mockSetReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "mockSetReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareMockRoundImplementationMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "multicall"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "multicall",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "multicall"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMockRoundImplementationRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMockRoundImplementationRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function usePrepareMockRoundImplementationSetApplicationStatuses(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "setApplicationStatuses"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "setApplicationStatuses"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareMockRoundImplementationSetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function usePrepareMockRoundImplementationUpdateApplicationMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateApplicationMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateApplicationMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function usePrepareMockRoundImplementationUpdateMatchAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateMatchAmount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateMatchAmount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function usePrepareMockRoundImplementationUpdateRoundFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateRoundFeeAddress"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateRoundFeeAddress"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function usePrepareMockRoundImplementationUpdateRoundFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateRoundFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateRoundFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function usePrepareMockRoundImplementationUpdateRoundMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateRoundMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateRoundMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function usePrepareMockRoundImplementationUpdateStartAndEndTimes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "updateStartAndEndTimes"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "updateStartAndEndTimes"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareMockRoundImplementationVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockRoundImplementationABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "vote"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareMockRoundImplementationWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockRoundImplementationABI,
      "withdraw"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockRoundImplementationABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockRoundImplementationABI,
    "withdraw"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function useMockRoundImplementationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockRoundImplementationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    ...config,
  } as UseContractEventConfig<typeof mockRoundImplementationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"ApplicationMetaPtrUpdated"`.
 */
export function useMockRoundImplementationApplicationMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "ApplicationMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "ApplicationMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "ApplicationMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"ApplicationStatusesUpdated"`.
 */
export function useMockRoundImplementationApplicationStatusesUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "ApplicationStatusesUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "ApplicationStatusesUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "ApplicationStatusesUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"ApplicationsEndTimeUpdated"`.
 */
export function useMockRoundImplementationApplicationsEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "ApplicationsEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "ApplicationsEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "ApplicationsEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"ApplicationsStartTimeUpdated"`.
 */
export function useMockRoundImplementationApplicationsStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "ApplicationsStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "ApplicationsStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "ApplicationsStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMockRoundImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRoundImplementationABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"MatchAmountUpdated"`.
 */
export function useMockRoundImplementationMatchAmountUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "MatchAmountUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "MatchAmountUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "MatchAmountUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"NewProjectApplication"`.
 */
export function useMockRoundImplementationNewProjectApplicationEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "NewProjectApplication"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "NewProjectApplication",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "NewProjectApplication"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"PayFeeAndEscrowFundsToPayoutContract"`.
 */
export function useMockRoundImplementationPayFeeAndEscrowFundsToPayoutContractEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "PayFeeAndEscrowFundsToPayoutContract"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "PayFeeAndEscrowFundsToPayoutContract",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "PayFeeAndEscrowFundsToPayoutContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"ProjectsMetaPtrUpdated"`.
 */
export function useMockRoundImplementationProjectsMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "ProjectsMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "ProjectsMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "ProjectsMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMockRoundImplementationRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMockRoundImplementationRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRoundImplementationABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMockRoundImplementationRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockRoundImplementationABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoundEndTimeUpdated"`.
 */
export function useMockRoundImplementationRoundEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoundEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoundEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoundEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoundFeeAddressUpdated"`.
 */
export function useMockRoundImplementationRoundFeeAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoundFeeAddressUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoundFeeAddressUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoundFeeAddressUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoundFeePercentageUpdated"`.
 */
export function useMockRoundImplementationRoundFeePercentageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoundFeePercentageUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoundFeePercentageUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoundFeePercentageUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoundMetaPtrUpdated"`.
 */
export function useMockRoundImplementationRoundMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoundMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoundMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoundMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__ and `eventName` set to `"RoundStartTimeUpdated"`.
 */
export function useMockRoundImplementationRoundStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockRoundImplementationABI,
      "RoundStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockRoundImplementationABI,
    eventName: "RoundStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof mockRoundImplementationABI,
    "RoundStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof programFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof programFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof programFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof programFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof programFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof programFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"programContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryProgramContract<
  TFunctionName extends "programContract",
  TSelectData = ReadContractResult<typeof programFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof programFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "programContract",
    ...config,
  } as UseContractReadConfig<
    typeof programFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof programFactoryABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<typeof programFactoryABI, TFunctionName, TMode>({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryCreate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "create" }
    : UseContractWriteConfig<typeof programFactoryABI, "create", TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof programFactoryABI, "create", TMode>({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "initialize" }
    : UseContractWriteConfig<typeof programFactoryABI, "initialize", TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof programFactoryABI, "initialize", TMode>({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      }
    : UseContractWriteConfig<
        typeof programFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof programFactoryABI, "renounceOwnership", TMode>(
    {
      abi: programFactoryABI,
      address: programFactoryAddress[5],
      functionName: "renounceOwnership",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      }
    : UseContractWriteConfig<
        typeof programFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof programFactoryABI, "transferOwnership", TMode>(
    {
      abi: programFactoryABI,
      address: programFactoryAddress[5],
      functionName: "transferOwnership",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"updateProgramContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryUpdateProgramContract<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programFactoryABI,
          "updateProgramContract"
        >["request"]["abi"],
        "updateProgramContract",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updateProgramContract";
      }
    : UseContractWriteConfig<
        typeof programFactoryABI,
        "updateProgramContract",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updateProgramContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof programFactoryABI,
    "updateProgramContract",
    TMode
  >({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "updateProgramContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof programFactoryABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof programFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof programFactoryABI, "create">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof programFactoryABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof programFactoryABI, "initialize">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof programFactoryABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programFactoryABI,
      "renounceOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programFactoryABI,
      "transferOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programFactoryABI}__ and `functionName` set to `"updateProgramContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareProgramFactoryUpdateProgramContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programFactoryABI,
      "updateProgramContract"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    functionName: "updateProgramContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programFactoryABI,
    "updateProgramContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof programFactoryABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as UseContractEventConfig<typeof programFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programFactoryABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof programFactoryABI, "Initialized">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof programFactoryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof programFactoryABI, "OwnershipTransferred">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof programFactoryABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programFactoryABI}__ and `eventName` set to `"ProgramContractUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryProgramContractUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof programFactoryABI, "ProgramContractUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    eventName: "ProgramContractUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof programFactoryABI,
    "ProgramContractUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programFactoryABI}__ and `eventName` set to `"ProgramCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useProgramFactoryProgramCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof programFactoryABI, "ProgramCreated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof programFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    eventName: "ProgramCreated",
    ...config,
  } as UseContractEventConfig<typeof programFactoryABI, "ProgramCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function useProgramImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useProgramImplementationDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"PROGRAM_OPERATOR_ROLE"`.
 */
export function useProgramImplementationProgramOperatorRole<
  TFunctionName extends "PROGRAM_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "PROGRAM_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useProgramImplementationGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useProgramImplementationGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useProgramImplementationGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useProgramImplementationHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"metaPtr"`.
 */
export function useProgramImplementationMetaPtr<
  TFunctionName extends "metaPtr",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "metaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useProgramImplementationSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof programImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof programImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: programImplementationABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof programImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function useProgramImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof programImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof programImplementationABI,
    TFunctionName,
    TMode
  >({ abi: programImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useProgramImplementationGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof programImplementationABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<typeof programImplementationABI, "grantRole", TMode>({
    abi: programImplementationABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useProgramImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof programImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof programImplementationABI, "initialize", TMode>(
    {
      abi: programImplementationABI,
      functionName: "initialize",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useProgramImplementationRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof programImplementationABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof programImplementationABI,
    "renounceRole",
    TMode
  >({
    abi: programImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useProgramImplementationRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof programImplementationABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<typeof programImplementationABI, "revokeRole", TMode>(
    {
      abi: programImplementationABI,
      functionName: "revokeRole",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"updateMetaPtr"`.
 */
export function useProgramImplementationUpdateMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof programImplementationABI,
          "updateMetaPtr"
        >["request"]["abi"],
        "updateMetaPtr",
        TMode
      > & { functionName?: "updateMetaPtr" }
    : UseContractWriteConfig<
        typeof programImplementationABI,
        "updateMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof programImplementationABI,
    "updateMetaPtr",
    TMode
  >({
    abi: programImplementationABI,
    functionName: "updateMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function usePrepareProgramImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareProgramImplementationGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof programImplementationABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareProgramImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareProgramImplementationRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programImplementationABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareProgramImplementationRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programImplementationABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link programImplementationABI}__ and `functionName` set to `"updateMetaPtr"`.
 */
export function usePrepareProgramImplementationUpdateMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof programImplementationABI,
      "updateMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: programImplementationABI,
    functionName: "updateMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof programImplementationABI,
    "updateMetaPtr"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function useProgramImplementationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    ...config,
  } as UseContractEventConfig<typeof programImplementationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useProgramImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof programImplementationABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__ and `eventName` set to `"MetaPtrUpdated"`.
 */
export function useProgramImplementationMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, "MetaPtrUpdated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    eventName: "MetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof programImplementationABI,
    "MetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useProgramImplementationRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof programImplementationABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useProgramImplementationRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof programImplementationABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link programImplementationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useProgramImplementationRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof programImplementationABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: programImplementationABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof programImplementationABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"getProjectOwners"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryGetProjectOwners<
  TFunctionName extends "getProjectOwners",
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "getProjectOwners",
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"projectOwnersCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryProjectOwnersCount<
  TFunctionName extends "projectOwnersCount",
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "projectOwnersCount",
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"projects"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryProjects<
  TFunctionName extends "projects",
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "projects",
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"projectsCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryProjectsCount<
  TFunctionName extends "projectsCount",
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "projectsCount",
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"projectsOwners"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryProjectsOwners<
  TFunctionName extends "projectsOwners",
  TSelectData = ReadContractResult<typeof projectRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof projectRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "projectsOwners",
    ...config,
  } as UseContractReadConfig<
    typeof projectRegistryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof projectRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<typeof projectRegistryABI, TFunctionName, TMode>({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"addProjectOwner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryAddProjectOwner<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          "addProjectOwner"
        >["request"]["abi"],
        "addProjectOwner",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "addProjectOwner";
      }
    : UseContractWriteConfig<
        typeof projectRegistryABI,
        "addProjectOwner",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "addProjectOwner";
      } = {} as any,
) {
  return useContractWrite<typeof projectRegistryABI, "addProjectOwner", TMode>({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "addProjectOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"createProject"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryCreateProject<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          "createProject"
        >["request"]["abi"],
        "createProject",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "createProject";
      }
    : UseContractWriteConfig<
        typeof projectRegistryABI,
        "createProject",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "createProject";
      } = {} as any,
) {
  return useContractWrite<typeof projectRegistryABI, "createProject", TMode>({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "createProject",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "initialize" }
    : UseContractWriteConfig<typeof projectRegistryABI, "initialize", TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof projectRegistryABI, "initialize", TMode>({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"removeProjectOwner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryRemoveProjectOwner<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          "removeProjectOwner"
        >["request"]["abi"],
        "removeProjectOwner",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "removeProjectOwner";
      }
    : UseContractWriteConfig<
        typeof projectRegistryABI,
        "removeProjectOwner",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "removeProjectOwner";
      } = {} as any,
) {
  return useContractWrite<
    typeof projectRegistryABI,
    "removeProjectOwner",
    TMode
  >({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "removeProjectOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"updateProjectMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryUpdateProjectMetadata<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof projectRegistryABI,
          "updateProjectMetadata"
        >["request"]["abi"],
        "updateProjectMetadata",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updateProjectMetadata";
      }
    : UseContractWriteConfig<
        typeof projectRegistryABI,
        "updateProjectMetadata",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updateProjectMetadata";
      } = {} as any,
) {
  return useContractWrite<
    typeof projectRegistryABI,
    "updateProjectMetadata",
    TMode
  >({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "updateProjectMetadata",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectRegistryABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectRegistryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"addProjectOwner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryAddProjectOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectRegistryABI, "addProjectOwner">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "addProjectOwner",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof projectRegistryABI,
    "addProjectOwner"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"createProject"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryCreateProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectRegistryABI, "createProject">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "createProject",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof projectRegistryABI,
    "createProject"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectRegistryABI, "initialize">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectRegistryABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"removeProjectOwner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryRemoveProjectOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof projectRegistryABI,
      "removeProjectOwner"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "removeProjectOwner",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof projectRegistryABI,
    "removeProjectOwner"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectRegistryABI}__ and `functionName` set to `"updateProjectMetadata"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function usePrepareProjectRegistryUpdateProjectMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof projectRegistryABI,
      "updateProjectMetadata"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    functionName: "updateProjectMetadata",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof projectRegistryABI,
    "updateProjectMetadata"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, "Initialized">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__ and `eventName` set to `"MetadataUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, "MetadataUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    eventName: "MetadataUpdated",
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, "MetadataUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__ and `eventName` set to `"OwnerAdded"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryOwnerAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, "OwnerAdded">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    eventName: "OwnerAdded",
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, "OwnerAdded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__ and `eventName` set to `"OwnerRemoved"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryOwnerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, "OwnerRemoved">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    eventName: "OwnerRemoved",
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, "OwnerRemoved">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectRegistryABI}__ and `eventName` set to `"ProjectCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function useProjectRegistryProjectCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectRegistryABI, "ProjectCreated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof projectRegistryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    eventName: "ProjectCreated",
    ...config,
  } as UseContractEventConfig<typeof projectRegistryABI, "ProjectCreated">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__.
 */
export function useIRoundFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iRoundFactoryABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iRoundFactoryABI, TFunctionName, TMode>({
    abi: iRoundFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useIRoundFactoryCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<typeof iRoundFactoryABI, "create", TMode> & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundFactoryABI, "create", TMode>({
    abi: iRoundFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useIRoundFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof iRoundFactoryABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundFactoryABI, "initialize", TMode>({
    abi: iRoundFactoryABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"updateAlloSettings"`.
 */
export function useIRoundFactoryUpdateAlloSettings<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundFactoryABI,
          "updateAlloSettings"
        >["request"]["abi"],
        "updateAlloSettings",
        TMode
      > & { functionName?: "updateAlloSettings" }
    : UseContractWriteConfig<
        typeof iRoundFactoryABI,
        "updateAlloSettings",
        TMode
      > & {
        abi?: never;
        functionName?: "updateAlloSettings";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundFactoryABI, "updateAlloSettings", TMode>(
    {
      abi: iRoundFactoryABI,
      functionName: "updateAlloSettings",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"updateRoundImplementation"`.
 */
export function useIRoundFactoryUpdateRoundImplementation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundFactoryABI,
          "updateRoundImplementation"
        >["request"]["abi"],
        "updateRoundImplementation",
        TMode
      > & { functionName?: "updateRoundImplementation" }
    : UseContractWriteConfig<
        typeof iRoundFactoryABI,
        "updateRoundImplementation",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundImplementation";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundFactoryABI,
    "updateRoundImplementation",
    TMode
  >({
    abi: iRoundFactoryABI,
    functionName: "updateRoundImplementation",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__.
 */
export function usePrepareIRoundFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRoundFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareIRoundFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRoundFactoryABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIRoundFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundFactoryABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundFactoryABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRoundFactoryABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"updateAlloSettings"`.
 */
export function usePrepareIRoundFactoryUpdateAlloSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundFactoryABI,
      "updateAlloSettings"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundFactoryABI,
    functionName: "updateAlloSettings",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundFactoryABI,
    "updateAlloSettings"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundFactoryABI}__ and `functionName` set to `"updateRoundImplementation"`.
 */
export function usePrepareIRoundFactoryUpdateRoundImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundFactoryABI,
      "updateRoundImplementation"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundFactoryABI,
    functionName: "updateRoundImplementation",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundFactoryABI,
    "updateRoundImplementation"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function useIRoundImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iRoundImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"getApplicationIndexesByProjectID"`.
 */
export function useIRoundImplementationGetApplicationIndexesByProjectId<
  TFunctionName extends "getApplicationIndexesByProjectID",
  TSelectData = ReadContractResult<
    typeof iRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iRoundImplementationABI,
    functionName: "getApplicationIndexesByProjectID",
    ...config,
  } as UseContractReadConfig<
    typeof iRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"getApplicationStatus"`.
 */
export function useIRoundImplementationGetApplicationStatus<
  TFunctionName extends "getApplicationStatus",
  TSelectData = ReadContractResult<
    typeof iRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iRoundImplementationABI,
    functionName: "getApplicationStatus",
    ...config,
  } as UseContractReadConfig<
    typeof iRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function useIRoundImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iRoundImplementationABI, TFunctionName, TMode>(
    { abi: iRoundImplementationABI, ...config } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function useIRoundImplementationApplyToRound<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "applyToRound"
        >["request"]["abi"],
        "applyToRound",
        TMode
      > & { functionName?: "applyToRound" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "applyToRound",
        TMode
      > & {
        abi?: never;
        functionName?: "applyToRound";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "applyToRound",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useIRoundImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundImplementationABI, "initialize", TMode>({
    abi: iRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function useIRoundImplementationSetApplicationStatuses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "setApplicationStatuses"
        >["request"]["abi"],
        "setApplicationStatuses",
        TMode
      > & { functionName?: "setApplicationStatuses" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "setApplicationStatuses",
        TMode
      > & {
        abi?: never;
        functionName?: "setApplicationStatuses";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "setApplicationStatuses",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useIRoundImplementationSetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "setReadyForPayout",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function useIRoundImplementationUpdateApplicationMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateApplicationMetaPtr"
        >["request"]["abi"],
        "updateApplicationMetaPtr",
        TMode
      > & { functionName?: "updateApplicationMetaPtr" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateApplicationMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateApplicationMetaPtr",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function useIRoundImplementationUpdateMatchAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateMatchAmount"
        >["request"]["abi"],
        "updateMatchAmount",
        TMode
      > & { functionName?: "updateMatchAmount" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateMatchAmount",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMatchAmount";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateMatchAmount",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function useIRoundImplementationUpdateRoundFeeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateRoundFeeAddress"
        >["request"]["abi"],
        "updateRoundFeeAddress",
        TMode
      > & { functionName?: "updateRoundFeeAddress" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateRoundFeeAddress",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeeAddress";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateRoundFeeAddress",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function useIRoundImplementationUpdateRoundFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateRoundFeePercentage"
        >["request"]["abi"],
        "updateRoundFeePercentage",
        TMode
      > & { functionName?: "updateRoundFeePercentage" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateRoundFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateRoundFeePercentage",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function useIRoundImplementationUpdateRoundMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateRoundMetaPtr"
        >["request"]["abi"],
        "updateRoundMetaPtr",
        TMode
      > & { functionName?: "updateRoundMetaPtr" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateRoundMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateRoundMetaPtr",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function useIRoundImplementationUpdateStartAndEndTimes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "updateStartAndEndTimes"
        >["request"]["abi"],
        "updateStartAndEndTimes",
        TMode
      > & { functionName?: "updateStartAndEndTimes" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "updateStartAndEndTimes",
        TMode
      > & {
        abi?: never;
        functionName?: "updateStartAndEndTimes";
      } = {} as any,
) {
  return useContractWrite<
    typeof iRoundImplementationABI,
    "updateStartAndEndTimes",
    TMode
  >({
    abi: iRoundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function useIRoundImplementationVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<typeof iRoundImplementationABI, "vote", TMode> & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundImplementationABI, "vote", TMode>({
    abi: iRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIRoundImplementationWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRoundImplementationABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<
        typeof iRoundImplementationABI,
        "withdraw",
        TMode
      > & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof iRoundImplementationABI, "withdraw", TMode>({
    abi: iRoundImplementationABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function usePrepareIRoundImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function usePrepareIRoundImplementationApplyToRound(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "applyToRound"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "applyToRound"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIRoundImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundImplementationABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function usePrepareIRoundImplementationSetApplicationStatuses(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "setApplicationStatuses"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "setApplicationStatuses"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareIRoundImplementationSetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function usePrepareIRoundImplementationUpdateApplicationMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateApplicationMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateApplicationMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function usePrepareIRoundImplementationUpdateMatchAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateMatchAmount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateMatchAmount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function usePrepareIRoundImplementationUpdateRoundFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateRoundFeeAddress"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateRoundFeeAddress"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function usePrepareIRoundImplementationUpdateRoundFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateRoundFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateRoundFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function usePrepareIRoundImplementationUpdateRoundMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateRoundMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateRoundMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function usePrepareIRoundImplementationUpdateStartAndEndTimes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRoundImplementationABI,
      "updateStartAndEndTimes"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "updateStartAndEndTimes"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIRoundImplementationVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundImplementationABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRoundImplementationABI, "vote">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRoundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIRoundImplementationWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRoundImplementationABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRoundImplementationABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRoundImplementationABI,
    "withdraw"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"VERSION"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"alloSettings"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryAlloSettings<
  TFunctionName extends "alloSettings",
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "alloSettings",
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"nonce"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryNonce<
  TFunctionName extends "nonce",
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "nonce",
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"roundImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryRoundImplementation<
  TFunctionName extends "roundImplementation",
  TSelectData = ReadContractResult<typeof roundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roundFactoryABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "roundImplementation",
    ...config,
  } as UseContractReadConfig<
    typeof roundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof roundFactoryABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, TFunctionName, TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryCreate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "create" }
    : UseContractWriteConfig<typeof roundFactoryABI, "create", TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, "create", TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "initialize" }
    : UseContractWriteConfig<typeof roundFactoryABI, "initialize", TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, "initialize", TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      }
    : UseContractWriteConfig<
        typeof roundFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, "renounceOwnership", TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      }
    : UseContractWriteConfig<
        typeof roundFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, "transferOwnership", TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"updateAlloSettings"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryUpdateAlloSettings<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "updateAlloSettings"
        >["request"]["abi"],
        "updateAlloSettings",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updateAlloSettings";
      }
    : UseContractWriteConfig<
        typeof roundFactoryABI,
        "updateAlloSettings",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updateAlloSettings";
      } = {} as any,
) {
  return useContractWrite<typeof roundFactoryABI, "updateAlloSettings", TMode>({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "updateAlloSettings",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"updateRoundImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryUpdateRoundImplementation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundFactoryABI,
          "updateRoundImplementation"
        >["request"]["abi"],
        "updateRoundImplementation",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updateRoundImplementation";
      }
    : UseContractWriteConfig<
        typeof roundFactoryABI,
        "updateRoundImplementation",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updateRoundImplementation";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundFactoryABI,
    "updateRoundImplementation",
    TMode
  >({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "updateRoundImplementation",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof roundFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, "create">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof roundFactoryABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, "initialize">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof roundFactoryABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, "renounceOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, "transferOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"updateAlloSettings"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryUpdateAlloSettings(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundFactoryABI, "updateAlloSettings">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "updateAlloSettings",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundFactoryABI,
    "updateAlloSettings"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundFactoryABI}__ and `functionName` set to `"updateRoundImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function usePrepareRoundFactoryUpdateRoundImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundFactoryABI,
      "updateRoundImplementation"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    functionName: "updateRoundImplementation",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundFactoryABI,
    "updateRoundImplementation"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof roundFactoryABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as UseContractEventConfig<typeof roundFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__ and `eventName` set to `"AlloSettingsUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryAlloSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundFactoryABI, "AlloSettingsUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    eventName: "AlloSettingsUpdated",
    ...config,
  } as UseContractEventConfig<typeof roundFactoryABI, "AlloSettingsUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundFactoryABI, "Initialized">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof roundFactoryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof roundFactoryABI, "OwnershipTransferred">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof roundFactoryABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__ and `eventName` set to `"RoundCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryRoundCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundFactoryABI, "RoundCreated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    eventName: "RoundCreated",
    ...config,
  } as UseContractEventConfig<typeof roundFactoryABI, "RoundCreated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundFactoryABI}__ and `eventName` set to `"RoundImplementationUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function useRoundFactoryRoundImplementationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundFactoryABI,
      "RoundImplementationUpdated"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof roundFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    eventName: "RoundImplementationUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundFactoryABI,
    "RoundImplementationUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function useRoundImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useRoundImplementationDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useRoundImplementationRoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"VERSION"`.
 */
export function useRoundImplementationVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"alloSettings"`.
 */
export function useRoundImplementationAlloSettings<
  TFunctionName extends "alloSettings",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "alloSettings",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applicationMetaPtr"`.
 */
export function useRoundImplementationApplicationMetaPtr<
  TFunctionName extends "applicationMetaPtr",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applicationMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applicationStatusesBitMap"`.
 */
export function useRoundImplementationApplicationStatusesBitMap<
  TFunctionName extends "applicationStatusesBitMap",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applicationStatusesBitMap",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applications"`.
 */
export function useRoundImplementationApplications<
  TFunctionName extends "applications",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applications",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applicationsEndTime"`.
 */
export function useRoundImplementationApplicationsEndTime<
  TFunctionName extends "applicationsEndTime",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applicationsEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applicationsIndexesByProjectID"`.
 */
export function useRoundImplementationApplicationsIndexesByProjectId<
  TFunctionName extends "applicationsIndexesByProjectID",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applicationsIndexesByProjectID",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applicationsStartTime"`.
 */
export function useRoundImplementationApplicationsStartTime<
  TFunctionName extends "applicationsStartTime",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "applicationsStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"getApplicationIndexesByProjectID"`.
 */
export function useRoundImplementationGetApplicationIndexesByProjectId<
  TFunctionName extends "getApplicationIndexesByProjectID",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "getApplicationIndexesByProjectID",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"getApplicationStatus"`.
 */
export function useRoundImplementationGetApplicationStatus<
  TFunctionName extends "getApplicationStatus",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "getApplicationStatus",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRoundImplementationGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useRoundImplementationGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useRoundImplementationGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRoundImplementationHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"matchAmount"`.
 */
export function useRoundImplementationMatchAmount<
  TFunctionName extends "matchAmount",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "matchAmount",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"nextApplicationIndex"`.
 */
export function useRoundImplementationNextApplicationIndex<
  TFunctionName extends "nextApplicationIndex",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "nextApplicationIndex",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"payoutStrategy"`.
 */
export function useRoundImplementationPayoutStrategy<
  TFunctionName extends "payoutStrategy",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "payoutStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"payoutStrategyFactory"`.
 */
export function useRoundImplementationPayoutStrategyFactory<
  TFunctionName extends "payoutStrategyFactory",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "payoutStrategyFactory",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"roundEndTime"`.
 */
export function useRoundImplementationRoundEndTime<
  TFunctionName extends "roundEndTime",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "roundEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"roundFeeAddress"`.
 */
export function useRoundImplementationRoundFeeAddress<
  TFunctionName extends "roundFeeAddress",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "roundFeeAddress",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"roundFeePercentage"`.
 */
export function useRoundImplementationRoundFeePercentage<
  TFunctionName extends "roundFeePercentage",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "roundFeePercentage",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"roundMetaPtr"`.
 */
export function useRoundImplementationRoundMetaPtr<
  TFunctionName extends "roundMetaPtr",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "roundMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"roundStartTime"`.
 */
export function useRoundImplementationRoundStartTime<
  TFunctionName extends "roundStartTime",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "roundStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRoundImplementationSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"token"`.
 */
export function useRoundImplementationToken<
  TFunctionName extends "token",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"votingStrategy"`.
 */
export function useRoundImplementationVotingStrategy<
  TFunctionName extends "votingStrategy",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "votingStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"votingStrategyFactory"`.
 */
export function useRoundImplementationVotingStrategyFactory<
  TFunctionName extends "votingStrategyFactory",
  TSelectData = ReadContractResult<
    typeof roundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof roundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: roundImplementationABI,
    functionName: "votingStrategyFactory",
    ...config,
  } as UseContractReadConfig<
    typeof roundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function useRoundImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, TFunctionName, TMode>({
    abi: roundImplementationABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function useRoundImplementationApplyToRound<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "applyToRound"
        >["request"]["abi"],
        "applyToRound",
        TMode
      > & { functionName?: "applyToRound" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "applyToRound",
        TMode
      > & {
        abi?: never;
        functionName?: "applyToRound";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "applyToRound", TMode>(
    {
      abi: roundImplementationABI,
      functionName: "applyToRound",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRoundImplementationGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "grantRole", TMode>({
    abi: roundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useRoundImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "initialize", TMode>({
    abi: roundImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"multicall"`.
 */
export function useRoundImplementationMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "multicall"
        >["request"]["abi"],
        "multicall",
        TMode
      > & { functionName?: "multicall" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "multicall",
        TMode
      > & {
        abi?: never;
        functionName?: "multicall";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "multicall", TMode>({
    abi: roundImplementationABI,
    functionName: "multicall",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRoundImplementationRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "renounceRole", TMode>(
    {
      abi: roundImplementationABI,
      functionName: "renounceRole",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRoundImplementationRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "revokeRole", TMode>({
    abi: roundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function useRoundImplementationSetApplicationStatuses<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "setApplicationStatuses"
        >["request"]["abi"],
        "setApplicationStatuses",
        TMode
      > & { functionName?: "setApplicationStatuses" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "setApplicationStatuses",
        TMode
      > & {
        abi?: never;
        functionName?: "setApplicationStatuses";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "setApplicationStatuses",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useRoundImplementationSetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "setReadyForPayout",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function useRoundImplementationUpdateApplicationMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateApplicationMetaPtr"
        >["request"]["abi"],
        "updateApplicationMetaPtr",
        TMode
      > & { functionName?: "updateApplicationMetaPtr" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateApplicationMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateApplicationMetaPtr",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function useRoundImplementationUpdateMatchAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateMatchAmount"
        >["request"]["abi"],
        "updateMatchAmount",
        TMode
      > & { functionName?: "updateMatchAmount" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateMatchAmount",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMatchAmount";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateMatchAmount",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function useRoundImplementationUpdateRoundFeeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateRoundFeeAddress"
        >["request"]["abi"],
        "updateRoundFeeAddress",
        TMode
      > & { functionName?: "updateRoundFeeAddress" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateRoundFeeAddress",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeeAddress";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateRoundFeeAddress",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function useRoundImplementationUpdateRoundFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateRoundFeePercentage"
        >["request"]["abi"],
        "updateRoundFeePercentage",
        TMode
      > & { functionName?: "updateRoundFeePercentage" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateRoundFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateRoundFeePercentage",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function useRoundImplementationUpdateRoundMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateRoundMetaPtr"
        >["request"]["abi"],
        "updateRoundMetaPtr",
        TMode
      > & { functionName?: "updateRoundMetaPtr" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateRoundMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateRoundMetaPtr",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function useRoundImplementationUpdateStartAndEndTimes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "updateStartAndEndTimes"
        >["request"]["abi"],
        "updateStartAndEndTimes",
        TMode
      > & { functionName?: "updateStartAndEndTimes" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "updateStartAndEndTimes",
        TMode
      > & {
        abi?: never;
        functionName?: "updateStartAndEndTimes";
      } = {} as any,
) {
  return useContractWrite<
    typeof roundImplementationABI,
    "updateStartAndEndTimes",
    TMode
  >({
    abi: roundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function useRoundImplementationVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<typeof roundImplementationABI, "vote", TMode> & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "vote", TMode>({
    abi: roundImplementationABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function useRoundImplementationWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof roundImplementationABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<
        typeof roundImplementationABI,
        "withdraw",
        TMode
      > & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof roundImplementationABI, "withdraw", TMode>({
    abi: roundImplementationABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function usePrepareRoundImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function usePrepareRoundImplementationApplyToRound(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "applyToRound"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "applyToRound"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRoundImplementationGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRoundImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareRoundImplementationMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "multicall">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "multicall",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "multicall"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRoundImplementationRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRoundImplementationRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"setApplicationStatuses"`.
 */
export function usePrepareRoundImplementationSetApplicationStatuses(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "setApplicationStatuses"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "setApplicationStatuses",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "setApplicationStatuses"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareRoundImplementationSetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function usePrepareRoundImplementationUpdateApplicationMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateApplicationMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateApplicationMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function usePrepareRoundImplementationUpdateMatchAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateMatchAmount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateMatchAmount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateMatchAmount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function usePrepareRoundImplementationUpdateRoundFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateRoundFeeAddress"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateRoundFeeAddress"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function usePrepareRoundImplementationUpdateRoundFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateRoundFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateRoundFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function usePrepareRoundImplementationUpdateRoundMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateRoundMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateRoundMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function usePrepareRoundImplementationUpdateStartAndEndTimes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof roundImplementationABI,
      "updateStartAndEndTimes"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "updateStartAndEndTimes"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareRoundImplementationVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<typeof roundImplementationABI, "vote">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roundImplementationABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareRoundImplementationWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roundImplementationABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roundImplementationABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roundImplementationABI,
    "withdraw"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function useRoundImplementationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    ...config,
  } as UseContractEventConfig<typeof roundImplementationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"ApplicationMetaPtrUpdated"`.
 */
export function useRoundImplementationApplicationMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "ApplicationMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "ApplicationMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "ApplicationMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"ApplicationStatusesUpdated"`.
 */
export function useRoundImplementationApplicationStatusesUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "ApplicationStatusesUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "ApplicationStatusesUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "ApplicationStatusesUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"ApplicationsEndTimeUpdated"`.
 */
export function useRoundImplementationApplicationsEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "ApplicationsEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "ApplicationsEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "ApplicationsEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"ApplicationsStartTimeUpdated"`.
 */
export function useRoundImplementationApplicationsStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "ApplicationsStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "ApplicationsStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "ApplicationsStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRoundImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof roundImplementationABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"MatchAmountUpdated"`.
 */
export function useRoundImplementationMatchAmountUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, "MatchAmountUpdated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "MatchAmountUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "MatchAmountUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"NewProjectApplication"`.
 */
export function useRoundImplementationNewProjectApplicationEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "NewProjectApplication"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "NewProjectApplication",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "NewProjectApplication"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"PayFeeAndEscrowFundsToPayoutContract"`.
 */
export function useRoundImplementationPayFeeAndEscrowFundsToPayoutContractEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "PayFeeAndEscrowFundsToPayoutContract"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "PayFeeAndEscrowFundsToPayoutContract",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "PayFeeAndEscrowFundsToPayoutContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"ProjectsMetaPtrUpdated"`.
 */
export function useRoundImplementationProjectsMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "ProjectsMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "ProjectsMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "ProjectsMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useRoundImplementationRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useRoundImplementationRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof roundImplementationABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useRoundImplementationRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof roundImplementationABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof roundImplementationABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoundEndTimeUpdated"`.
 */
export function useRoundImplementationRoundEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "RoundEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoundEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoundEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoundFeeAddressUpdated"`.
 */
export function useRoundImplementationRoundFeeAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "RoundFeeAddressUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoundFeeAddressUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoundFeeAddressUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoundFeePercentageUpdated"`.
 */
export function useRoundImplementationRoundFeePercentageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "RoundFeePercentageUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoundFeePercentageUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoundFeePercentageUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoundMetaPtrUpdated"`.
 */
export function useRoundImplementationRoundMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "RoundMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoundMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoundMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roundImplementationABI}__ and `eventName` set to `"RoundStartTimeUpdated"`.
 */
export function useRoundImplementationRoundStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof roundImplementationABI,
      "RoundStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: roundImplementationABI,
    eventName: "RoundStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof roundImplementationABI,
    "RoundStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function useAlloSettingsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"DENOMINATOR"`.
 */
export function useAlloSettingsDenominator<
  TFunctionName extends "DENOMINATOR",
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    functionName: "DENOMINATOR",
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"VERSION"`.
 */
export function useAlloSettingsVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"owner"`.
 */
export function useAlloSettingsOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"protocolFeePercentage"`.
 */
export function useAlloSettingsProtocolFeePercentage<
  TFunctionName extends "protocolFeePercentage",
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    functionName: "protocolFeePercentage",
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"protocolTreasury"`.
 */
export function useAlloSettingsProtocolTreasury<
  TFunctionName extends "protocolTreasury",
  TSelectData = ReadContractResult<typeof alloSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alloSettingsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: alloSettingsABI,
    functionName: "protocolTreasury",
    ...config,
  } as UseContractReadConfig<
    typeof alloSettingsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function useAlloSettingsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof alloSettingsABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof alloSettingsABI, TFunctionName, TMode>({
    abi: alloSettingsABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"initialize"`.
 */
export function useAlloSettingsInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof alloSettingsABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof alloSettingsABI, "initialize", TMode>({
    abi: alloSettingsABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAlloSettingsRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof alloSettingsABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof alloSettingsABI, "renounceOwnership", TMode>({
    abi: alloSettingsABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAlloSettingsTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof alloSettingsABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof alloSettingsABI, "transferOwnership", TMode>({
    abi: alloSettingsABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"updateProtocolFeePercentage"`.
 */
export function useAlloSettingsUpdateProtocolFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          "updateProtocolFeePercentage"
        >["request"]["abi"],
        "updateProtocolFeePercentage",
        TMode
      > & { functionName?: "updateProtocolFeePercentage" }
    : UseContractWriteConfig<
        typeof alloSettingsABI,
        "updateProtocolFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProtocolFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof alloSettingsABI,
    "updateProtocolFeePercentage",
    TMode
  >({
    abi: alloSettingsABI,
    functionName: "updateProtocolFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"updateProtocolTreasury"`.
 */
export function useAlloSettingsUpdateProtocolTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof alloSettingsABI,
          "updateProtocolTreasury"
        >["request"]["abi"],
        "updateProtocolTreasury",
        TMode
      > & { functionName?: "updateProtocolTreasury" }
    : UseContractWriteConfig<
        typeof alloSettingsABI,
        "updateProtocolTreasury",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProtocolTreasury";
      } = {} as any,
) {
  return useContractWrite<
    typeof alloSettingsABI,
    "updateProtocolTreasury",
    TMode
  >({
    abi: alloSettingsABI,
    functionName: "updateProtocolTreasury",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function usePrepareAlloSettingsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alloSettingsABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof alloSettingsABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAlloSettingsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alloSettingsABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof alloSettingsABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAlloSettingsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alloSettingsABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof alloSettingsABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAlloSettingsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alloSettingsABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof alloSettingsABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"updateProtocolFeePercentage"`.
 */
export function usePrepareAlloSettingsUpdateProtocolFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof alloSettingsABI,
      "updateProtocolFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    functionName: "updateProtocolFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof alloSettingsABI,
    "updateProtocolFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloSettingsABI}__ and `functionName` set to `"updateProtocolTreasury"`.
 */
export function usePrepareAlloSettingsUpdateProtocolTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof alloSettingsABI,
      "updateProtocolTreasury"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alloSettingsABI,
    functionName: "updateProtocolTreasury",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof alloSettingsABI,
    "updateProtocolTreasury"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function useAlloSettingsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof alloSettingsABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: alloSettingsABI,
    ...config,
  } as UseContractEventConfig<typeof alloSettingsABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloSettingsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAlloSettingsInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof alloSettingsABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: alloSettingsABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof alloSettingsABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloSettingsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAlloSettingsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof alloSettingsABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: alloSettingsABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof alloSettingsABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloSettingsABI}__ and `eventName` set to `"ProtocolFeePercentageUpdated"`.
 */
export function useAlloSettingsProtocolFeePercentageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof alloSettingsABI,
      "ProtocolFeePercentageUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: alloSettingsABI,
    eventName: "ProtocolFeePercentageUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof alloSettingsABI,
    "ProtocolFeePercentageUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloSettingsABI}__ and `eventName` set to `"ProtocolTreasuryUpdated"`.
 */
export function useAlloSettingsProtocolTreasuryUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof alloSettingsABI, "ProtocolTreasuryUpdated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: alloSettingsABI,
    eventName: "ProtocolTreasuryUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof alloSettingsABI,
    "ProtocolTreasuryUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function useIVotingStrategyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotingStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingStrategyABI,
    ...config,
  } as UseContractReadConfig<
    typeof iVotingStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingStrategyABI}__ and `functionName` set to `"roundAddress"`.
 */
export function useIVotingStrategyRoundAddress<
  TFunctionName extends "roundAddress",
  TSelectData = ReadContractResult<typeof iVotingStrategyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingStrategyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingStrategyABI,
    functionName: "roundAddress",
    ...config,
  } as UseContractReadConfig<
    typeof iVotingStrategyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function useIVotingStrategyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iVotingStrategyABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iVotingStrategyABI, TFunctionName, TMode>({
    abi: iVotingStrategyABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__ and `functionName` set to `"init"`.
 */
export function useIVotingStrategyInit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyABI,
          "init"
        >["request"]["abi"],
        "init",
        TMode
      > & { functionName?: "init" }
    : UseContractWriteConfig<typeof iVotingStrategyABI, "init", TMode> & {
        abi?: never;
        functionName?: "init";
      } = {} as any,
) {
  return useContractWrite<typeof iVotingStrategyABI, "init", TMode>({
    abi: iVotingStrategyABI,
    functionName: "init",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__ and `functionName` set to `"vote"`.
 */
export function useIVotingStrategyVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<typeof iVotingStrategyABI, "vote", TMode> & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof iVotingStrategyABI, "vote", TMode>({
    abi: iVotingStrategyABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function usePrepareIVotingStrategyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingStrategyABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingStrategyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareIVotingStrategyInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingStrategyABI, "init">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyABI,
    functionName: "init",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingStrategyABI, "init">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIVotingStrategyVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingStrategyABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingStrategyABI, "vote">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__.
 */
export function useIVotingStrategyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iVotingStrategyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof iVotingStrategyFactoryABI,
    TFunctionName,
    TMode
  >({ abi: iVotingStrategyFactoryABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useIVotingStrategyFactoryCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<
        typeof iVotingStrategyFactoryABI,
        "create",
        TMode
      > & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof iVotingStrategyFactoryABI, "create", TMode>({
    abi: iVotingStrategyFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useIVotingStrategyFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof iVotingStrategyFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof iVotingStrategyFactoryABI,
    "initialize",
    TMode
  >({
    abi: iVotingStrategyFactoryABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"updateVotingContract"`.
 */
export function useIVotingStrategyFactoryUpdateVotingContract<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iVotingStrategyFactoryABI,
          "updateVotingContract"
        >["request"]["abi"],
        "updateVotingContract",
        TMode
      > & { functionName?: "updateVotingContract" }
    : UseContractWriteConfig<
        typeof iVotingStrategyFactoryABI,
        "updateVotingContract",
        TMode
      > & {
        abi?: never;
        functionName?: "updateVotingContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof iVotingStrategyFactoryABI,
    "updateVotingContract",
    TMode
  >({
    abi: iVotingStrategyFactoryABI,
    functionName: "updateVotingContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__.
 */
export function usePrepareIVotingStrategyFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iVotingStrategyFactoryABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotingStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareIVotingStrategyFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingStrategyFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotingStrategyFactoryABI,
    "create"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIVotingStrategyFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iVotingStrategyFactoryABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyFactoryABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotingStrategyFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__ and `functionName` set to `"updateVotingContract"`.
 */
export function usePrepareIVotingStrategyFactoryUpdateVotingContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iVotingStrategyFactoryABI,
      "updateVotingContract"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingStrategyFactoryABI,
    functionName: "updateVotingContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotingStrategyFactoryABI,
    "updateVotingContract"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, TFunctionName, TMode>({
    abi: accessControlABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof accessControlABI, "grantRole", TMode> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, "grantRole", TMode>({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<typeof accessControlABI, "renounceRole", TMode> & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, "renounceRole", TMode>({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof accessControlABI, "revokeRole", TMode> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, "revokeRole", TMode>({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlEnumerableDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlEnumerableGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useAccessControlEnumerableGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useAccessControlEnumerableGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlEnumerableHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlEnumerableSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof accessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof accessControlEnumerableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlEnumerableABI,
    TFunctionName,
    TMode
  >({ abi: accessControlEnumerableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof accessControlEnumerableABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlEnumerableABI,
    "grantRole",
    TMode
  >({
    abi: accessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof accessControlEnumerableABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlEnumerableABI,
    "renounceRole",
    TMode
  >({
    abi: accessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof accessControlEnumerableABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof accessControlEnumerableABI,
    "revokeRole",
    TMode
  >({
    abi: accessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function usePrepareAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlEnumerableABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accessControlEnumerableABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof accessControlEnumerableABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof accessControlEnumerableABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof accessControlEnumerableABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, TFunctionName, TMode>({
    abi: iAccessControlABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof iAccessControlABI, "grantRole", TMode> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, "grantRole", TMode>({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof iAccessControlABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, "renounceRole", TMode>({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof iAccessControlABI, "revokeRole", TMode> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, "revokeRole", TMode>({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlEnumerableGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useIAccessControlEnumerableGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useIAccessControlEnumerableGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlEnumerableHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iAccessControlEnumerableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlEnumerableABI,
    TFunctionName,
    TMode
  >({ abi: iAccessControlEnumerableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof iAccessControlEnumerableABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlEnumerableABI,
    "grantRole",
    TMode
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof iAccessControlEnumerableABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlEnumerableABI,
    "renounceRole",
    TMode
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof iAccessControlEnumerableABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof iAccessControlEnumerableABI,
    "revokeRole",
    TMode
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function usePrepareIAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlEnumerableABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAccessControlEnumerableABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlEnumerableABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ownableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableUpgradeableOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ownableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ownableUpgradeableABI, TFunctionName, TMode>({
    abi: ownableUpgradeableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableUpgradeableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof ownableUpgradeableABI,
    "renounceOwnership",
    TMode
  >({
    abi: ownableUpgradeableABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableUpgradeableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof ownableUpgradeableABI,
    "transferOwnership",
    TMode
  >({
    abi: ownableUpgradeableABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function usePrepareOwnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableUpgradeableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableUpgradeableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOwnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableUpgradeableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ownableUpgradeableABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, "Initialized">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function useMulticallUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicallUpgradeableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof multicallUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof multicallUpgradeableABI, TFunctionName, TMode>(
    { abi: multicallUpgradeableABI, ...config } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallUpgradeableABI}__ and `functionName` set to `"multicall"`.
 */
export function useMulticallUpgradeableMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicallUpgradeableABI,
          "multicall"
        >["request"]["abi"],
        "multicall",
        TMode
      > & { functionName?: "multicall" }
    : UseContractWriteConfig<
        typeof multicallUpgradeableABI,
        "multicall",
        TMode
      > & {
        abi?: never;
        functionName?: "multicall";
      } = {} as any,
) {
  return useContractWrite<typeof multicallUpgradeableABI, "multicall", TMode>({
    abi: multicallUpgradeableABI,
    functionName: "multicall",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function usePrepareMulticallUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multicallUpgradeableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicallUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multicallUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallUpgradeableABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareMulticallUpgradeableMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicallUpgradeableABI, "multicall">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicallUpgradeableABI,
    functionName: "multicall",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multicallUpgradeableABI,
    "multicall"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function useMulticallUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof multicallUpgradeableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: multicallUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof multicallUpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multicallUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMulticallUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof multicallUpgradeableABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: multicallUpgradeableABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof multicallUpgradeableABI, "Initialized">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function useDummyProgramFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"foobar"`.
 */
export function useDummyProgramFactoryFoobar<
  TFunctionName extends "foobar",
  TSelectData = ReadContractResult<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramFactoryABI,
    functionName: "foobar",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useDummyProgramFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramFactoryABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"programContract"`.
 */
export function useDummyProgramFactoryProgramContract<
  TFunctionName extends "programContract",
  TSelectData = ReadContractResult<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramFactoryABI,
    functionName: "programContract",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function useDummyProgramFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyProgramFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof dummyProgramFactoryABI, TFunctionName, TMode>({
    abi: dummyProgramFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useDummyProgramFactoryCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<typeof dummyProgramFactoryABI, "create", TMode> & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof dummyProgramFactoryABI, "create", TMode>({
    abi: dummyProgramFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyProgramFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyProgramFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof dummyProgramFactoryABI, "initialize", TMode>({
    abi: dummyProgramFactoryABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDummyProgramFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof dummyProgramFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramFactoryABI,
    "renounceOwnership",
    TMode
  >({
    abi: dummyProgramFactoryABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDummyProgramFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof dummyProgramFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramFactoryABI,
    "transferOwnership",
    TMode
  >({
    abi: dummyProgramFactoryABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"updateProgramContract"`.
 */
export function useDummyProgramFactoryUpdateProgramContract<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramFactoryABI,
          "updateProgramContract"
        >["request"]["abi"],
        "updateProgramContract",
        TMode
      > & { functionName?: "updateProgramContract" }
    : UseContractWriteConfig<
        typeof dummyProgramFactoryABI,
        "updateProgramContract",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProgramContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramFactoryABI,
    "updateProgramContract",
    TMode
  >({
    abi: dummyProgramFactoryABI,
    functionName: "updateProgramContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function usePrepareDummyProgramFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyProgramFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareDummyProgramFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyProgramFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyProgramFactoryABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyProgramFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyProgramFactoryABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDummyProgramFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramFactoryABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDummyProgramFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramFactoryABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `functionName` set to `"updateProgramContract"`.
 */
export function usePrepareDummyProgramFactoryUpdateProgramContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramFactoryABI,
      "updateProgramContract"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramFactoryABI,
    functionName: "updateProgramContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramFactoryABI,
    "updateProgramContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function useDummyProgramFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramFactoryABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof dummyProgramFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyProgramFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramFactoryABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramFactoryABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof dummyProgramFactoryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDummyProgramFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyProgramFactoryABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramFactoryABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramFactoryABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `eventName` set to `"ProgramContractUpdated"`.
 */
export function useDummyProgramFactoryProgramContractUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyProgramFactoryABI,
      "ProgramContractUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramFactoryABI,
    eventName: "ProgramContractUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramFactoryABI,
    "ProgramContractUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__ and `eventName` set to `"ProgramCreated"`.
 */
export function useDummyProgramFactoryProgramCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramFactoryABI, "ProgramCreated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramFactoryABI,
    eventName: "ProgramCreated",
    ...config,
  } as UseContractEventConfig<typeof dummyProgramFactoryABI, "ProgramCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function useDummyProgramImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useDummyProgramImplementationDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"PROGRAM_OPERATOR_ROLE"`.
 */
export function useDummyProgramImplementationProgramOperatorRole<
  TFunctionName extends "PROGRAM_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "PROGRAM_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"foobar"`.
 */
export function useDummyProgramImplementationFoobar<
  TFunctionName extends "foobar",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "foobar",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useDummyProgramImplementationGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useDummyProgramImplementationGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useDummyProgramImplementationGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useDummyProgramImplementationHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"metaPtr"`.
 */
export function useDummyProgramImplementationMetaPtr<
  TFunctionName extends "metaPtr",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "metaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDummyProgramImplementationSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyProgramImplementationABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function useDummyProgramImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    TFunctionName,
    TMode
  >({ abi: dummyProgramImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useDummyProgramImplementationGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    "grantRole",
    TMode
  >({
    abi: dummyProgramImplementationABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyProgramImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    "initialize",
    TMode
  >({
    abi: dummyProgramImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useDummyProgramImplementationRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    "renounceRole",
    TMode
  >({
    abi: dummyProgramImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useDummyProgramImplementationRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    "revokeRole",
    TMode
  >({
    abi: dummyProgramImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"updateMetaPtr"`.
 */
export function useDummyProgramImplementationUpdateMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyProgramImplementationABI,
          "updateMetaPtr"
        >["request"]["abi"],
        "updateMetaPtr",
        TMode
      > & { functionName?: "updateMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyProgramImplementationABI,
        "updateMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyProgramImplementationABI,
    "updateMetaPtr",
    TMode
  >({
    abi: dummyProgramImplementationABI,
    functionName: "updateMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function usePrepareDummyProgramImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareDummyProgramImplementationGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyProgramImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareDummyProgramImplementationRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareDummyProgramImplementationRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `functionName` set to `"updateMetaPtr"`.
 */
export function usePrepareDummyProgramImplementationUpdateMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyProgramImplementationABI,
      "updateMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyProgramImplementationABI,
    functionName: "updateMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyProgramImplementationABI,
    "updateMetaPtr"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function useDummyProgramImplementationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramImplementationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyProgramImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramImplementationABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `eventName` set to `"MetadataUpdated"`.
 */
export function useDummyProgramImplementationMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyProgramImplementationABI,
      "MetadataUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    eventName: "MetadataUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    "MetadataUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useDummyProgramImplementationRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyProgramImplementationABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useDummyProgramImplementationRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramImplementationABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useDummyProgramImplementationRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyProgramImplementationABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyProgramImplementationABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof dummyProgramImplementationABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function useDummyRoundFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dummyRoundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"foobar"`.
 */
export function useDummyRoundFactoryFoobar<
  TFunctionName extends "foobar",
  TSelectData = ReadContractResult<typeof dummyRoundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryABI,
    functionName: "foobar",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useDummyRoundFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof dummyRoundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"roundContract"`.
 */
export function useDummyRoundFactoryRoundContract<
  TFunctionName extends "roundContract",
  TSelectData = ReadContractResult<typeof dummyRoundFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryABI,
    functionName: "roundContract",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function useDummyRoundFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyRoundFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryABI, TFunctionName, TMode>({
    abi: dummyRoundFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useDummyRoundFactoryCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<typeof dummyRoundFactoryABI, "create", TMode> & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryABI, "create", TMode>({
    abi: dummyRoundFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyRoundFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryABI, "initialize", TMode>({
    abi: dummyRoundFactoryABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDummyRoundFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryABI,
    "renounceOwnership",
    TMode
  >({
    abi: dummyRoundFactoryABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDummyRoundFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryABI,
    "transferOwnership",
    TMode
  >({
    abi: dummyRoundFactoryABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"updateRoundContract"`.
 */
export function useDummyRoundFactoryUpdateRoundContract<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryABI,
          "updateRoundContract"
        >["request"]["abi"],
        "updateRoundContract",
        TMode
      > & { functionName?: "updateRoundContract" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryABI,
        "updateRoundContract",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryABI,
    "updateRoundContract",
    TMode
  >({
    abi: dummyRoundFactoryABI,
    functionName: "updateRoundContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function usePrepareDummyRoundFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareDummyRoundFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyRoundFactoryABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyRoundFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDummyRoundFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDummyRoundFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `functionName` set to `"updateRoundContract"`.
 */
export function usePrepareDummyRoundFactoryUpdateRoundContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryABI,
      "updateRoundContract"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryABI,
    functionName: "updateRoundContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryABI,
    "updateRoundContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function useDummyRoundFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyRoundFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDummyRoundFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `eventName` set to `"RoundContractUpdated"`.
 */
export function useDummyRoundFactoryRoundContractUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryABI, "RoundContractUpdated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryABI,
    eventName: "RoundContractUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryABI,
    "RoundContractUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__ and `eventName` set to `"RoundCreated"`.
 */
export function useDummyRoundFactoryRoundCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryABI, "RoundCreated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryABI,
    eventName: "RoundCreated",
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryABI, "RoundCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function useDummyRoundFactoryV1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"VERSION"`.
 */
export function useDummyRoundFactoryV1Version<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"owner"`.
 */
export function useDummyRoundFactoryV1Owner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"protocolFeePercentage"`.
 */
export function useDummyRoundFactoryV1ProtocolFeePercentage<
  TFunctionName extends "protocolFeePercentage",
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    functionName: "protocolFeePercentage",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"protocolTreasury"`.
 */
export function useDummyRoundFactoryV1ProtocolTreasury<
  TFunctionName extends "protocolTreasury",
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    functionName: "protocolTreasury",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"roundContract"`.
 */
export function useDummyRoundFactoryV1RoundContract<
  TFunctionName extends "roundContract",
  TSelectData = ReadContractResult<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundFactoryV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundFactoryV1ABI,
    functionName: "roundContract",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function useDummyRoundFactoryV1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryV1ABI, TFunctionName, TMode>({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"create"`.
 */
export function useDummyRoundFactoryV1Create<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { functionName?: "create" }
    : UseContractWriteConfig<typeof dummyRoundFactoryV1ABI, "create", TMode> & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryV1ABI, "create", TMode>({
    abi: dummyRoundFactoryV1ABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyRoundFactoryV1Initialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundFactoryV1ABI, "initialize", TMode>({
    abi: dummyRoundFactoryV1ABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDummyRoundFactoryV1RenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryV1ABI,
    "renounceOwnership",
    TMode
  >({
    abi: dummyRoundFactoryV1ABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDummyRoundFactoryV1TransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryV1ABI,
    "transferOwnership",
    TMode
  >({
    abi: dummyRoundFactoryV1ABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateProtocolFeePercentage"`.
 */
export function useDummyRoundFactoryV1UpdateProtocolFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "updateProtocolFeePercentage"
        >["request"]["abi"],
        "updateProtocolFeePercentage",
        TMode
      > & { functionName?: "updateProtocolFeePercentage" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "updateProtocolFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProtocolFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryV1ABI,
    "updateProtocolFeePercentage",
    TMode
  >({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateProtocolFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateProtocolTreasury"`.
 */
export function useDummyRoundFactoryV1UpdateProtocolTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "updateProtocolTreasury"
        >["request"]["abi"],
        "updateProtocolTreasury",
        TMode
      > & { functionName?: "updateProtocolTreasury" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "updateProtocolTreasury",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProtocolTreasury";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryV1ABI,
    "updateProtocolTreasury",
    TMode
  >({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateProtocolTreasury",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateRoundContract"`.
 */
export function useDummyRoundFactoryV1UpdateRoundContract<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundFactoryV1ABI,
          "updateRoundContract"
        >["request"]["abi"],
        "updateRoundContract",
        TMode
      > & { functionName?: "updateRoundContract" }
    : UseContractWriteConfig<
        typeof dummyRoundFactoryV1ABI,
        "updateRoundContract",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundFactoryV1ABI,
    "updateRoundContract",
    TMode
  >({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateRoundContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function usePrepareDummyRoundFactoryV1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryV1ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareDummyRoundFactoryV1Create(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryV1ABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyRoundFactoryV1ABI, "create">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyRoundFactoryV1Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundFactoryV1ABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDummyRoundFactoryV1RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryV1ABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDummyRoundFactoryV1TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryV1ABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateProtocolFeePercentage"`.
 */
export function usePrepareDummyRoundFactoryV1UpdateProtocolFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryV1ABI,
      "updateProtocolFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateProtocolFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "updateProtocolFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateProtocolTreasury"`.
 */
export function usePrepareDummyRoundFactoryV1UpdateProtocolTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryV1ABI,
      "updateProtocolTreasury"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateProtocolTreasury",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "updateProtocolTreasury"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `functionName` set to `"updateRoundContract"`.
 */
export function usePrepareDummyRoundFactoryV1UpdateRoundContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundFactoryV1ABI,
      "updateRoundContract"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundFactoryV1ABI,
    functionName: "updateRoundContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundFactoryV1ABI,
    "updateRoundContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function useDummyRoundFactoryV1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryV1ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryV1ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyRoundFactoryV1InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryV1ABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryV1ABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDummyRoundFactoryV1OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundFactoryV1ABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryV1ABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"ProtocolFeePercentageUpdated"`.
 */
export function useDummyRoundFactoryV1ProtocolFeePercentageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundFactoryV1ABI,
      "ProtocolFeePercentageUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "ProtocolFeePercentageUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryV1ABI,
    "ProtocolFeePercentageUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"ProtocolTreasuryUpdated"`.
 */
export function useDummyRoundFactoryV1ProtocolTreasuryUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundFactoryV1ABI,
      "ProtocolTreasuryUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "ProtocolTreasuryUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryV1ABI,
    "ProtocolTreasuryUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"RoundContractUpdated"`.
 */
export function useDummyRoundFactoryV1RoundContractUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundFactoryV1ABI,
      "RoundContractUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "RoundContractUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundFactoryV1ABI,
    "RoundContractUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__ and `eventName` set to `"RoundCreated"`.
 */
export function useDummyRoundFactoryV1RoundCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundFactoryV1ABI, "RoundCreated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundFactoryV1ABI,
    eventName: "RoundCreated",
    ...config,
  } as UseContractEventConfig<typeof dummyRoundFactoryV1ABI, "RoundCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function useDummyRoundImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useDummyRoundImplementationDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useDummyRoundImplementationRoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"applicationMetaPtr"`.
 */
export function useDummyRoundImplementationApplicationMetaPtr<
  TFunctionName extends "applicationMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "applicationMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"applicationsEndTime"`.
 */
export function useDummyRoundImplementationApplicationsEndTime<
  TFunctionName extends "applicationsEndTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "applicationsEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"applicationsStartTime"`.
 */
export function useDummyRoundImplementationApplicationsStartTime<
  TFunctionName extends "applicationsStartTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "applicationsStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"foobar"`.
 */
export function useDummyRoundImplementationFoobar<
  TFunctionName extends "foobar",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "foobar",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useDummyRoundImplementationGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useDummyRoundImplementationGetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useDummyRoundImplementationGetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useDummyRoundImplementationHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"projectsMetaPtr"`.
 */
export function useDummyRoundImplementationProjectsMetaPtr<
  TFunctionName extends "projectsMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "projectsMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"roundEndTime"`.
 */
export function useDummyRoundImplementationRoundEndTime<
  TFunctionName extends "roundEndTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "roundEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"roundMetaPtr"`.
 */
export function useDummyRoundImplementationRoundMetaPtr<
  TFunctionName extends "roundMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "roundMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"roundStartTime"`.
 */
export function useDummyRoundImplementationRoundStartTime<
  TFunctionName extends "roundStartTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "roundStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDummyRoundImplementationSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"token"`.
 */
export function useDummyRoundImplementationToken<
  TFunctionName extends "token",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"votingStrategy"`.
 */
export function useDummyRoundImplementationVotingStrategy<
  TFunctionName extends "votingStrategy",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationABI,
    functionName: "votingStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function useDummyRoundImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    TFunctionName,
    TMode
  >({ abi: dummyRoundImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function useDummyRoundImplementationApplyToRound<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "applyToRound"
        >["request"]["abi"],
        "applyToRound",
        TMode
      > & { functionName?: "applyToRound" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "applyToRound",
        TMode
      > & {
        abi?: never;
        functionName?: "applyToRound";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "applyToRound",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useDummyRoundImplementationGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "grantRole",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyRoundImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "initialize",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useDummyRoundImplementationRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "renounceRole",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useDummyRoundImplementationRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "revokeRole",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function useDummyRoundImplementationUpdateApplicationMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateApplicationMetaPtr"
        >["request"]["abi"],
        "updateApplicationMetaPtr",
        TMode
      > & { functionName?: "updateApplicationMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateApplicationMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateApplicationMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationsEndTime"`.
 */
export function useDummyRoundImplementationUpdateApplicationsEndTime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateApplicationsEndTime"
        >["request"]["abi"],
        "updateApplicationsEndTime",
        TMode
      > & { functionName?: "updateApplicationsEndTime" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateApplicationsEndTime",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationsEndTime";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateApplicationsEndTime",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationsEndTime",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationsStartTime"`.
 */
export function useDummyRoundImplementationUpdateApplicationsStartTime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateApplicationsStartTime"
        >["request"]["abi"],
        "updateApplicationsStartTime",
        TMode
      > & { functionName?: "updateApplicationsStartTime" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateApplicationsStartTime",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationsStartTime";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateApplicationsStartTime",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationsStartTime",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateProjectsMetaPtr"`.
 */
export function useDummyRoundImplementationUpdateProjectsMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateProjectsMetaPtr"
        >["request"]["abi"],
        "updateProjectsMetaPtr",
        TMode
      > & { functionName?: "updateProjectsMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateProjectsMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProjectsMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateProjectsMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateProjectsMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundEndTime"`.
 */
export function useDummyRoundImplementationUpdateRoundEndTime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateRoundEndTime"
        >["request"]["abi"],
        "updateRoundEndTime",
        TMode
      > & { functionName?: "updateRoundEndTime" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateRoundEndTime",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundEndTime";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateRoundEndTime",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundEndTime",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function useDummyRoundImplementationUpdateRoundMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateRoundMetaPtr"
        >["request"]["abi"],
        "updateRoundMetaPtr",
        TMode
      > & { functionName?: "updateRoundMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateRoundMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateRoundMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundStartTime"`.
 */
export function useDummyRoundImplementationUpdateRoundStartTime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "updateRoundStartTime"
        >["request"]["abi"],
        "updateRoundStartTime",
        TMode
      > & { functionName?: "updateRoundStartTime" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "updateRoundStartTime",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundStartTime";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationABI,
    "updateRoundStartTime",
    TMode
  >({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundStartTime",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function useDummyRoundImplementationVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationABI,
        "vote",
        TMode
      > & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundImplementationABI, "vote", TMode>({
    abi: dummyRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function usePrepareDummyRoundImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"applyToRound"`.
 */
export function usePrepareDummyRoundImplementationApplyToRound(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "applyToRound"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "applyToRound",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "applyToRound"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareDummyRoundImplementationGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyRoundImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareDummyRoundImplementationRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareDummyRoundImplementationRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationUpdateApplicationMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateApplicationMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateApplicationMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationsEndTime"`.
 */
export function usePrepareDummyRoundImplementationUpdateApplicationsEndTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateApplicationsEndTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationsEndTime",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateApplicationsEndTime"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateApplicationsStartTime"`.
 */
export function usePrepareDummyRoundImplementationUpdateApplicationsStartTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateApplicationsStartTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateApplicationsStartTime",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateApplicationsStartTime"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateProjectsMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationUpdateProjectsMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateProjectsMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateProjectsMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateProjectsMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundEndTime"`.
 */
export function usePrepareDummyRoundImplementationUpdateRoundEndTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateRoundEndTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundEndTime",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateRoundEndTime"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationUpdateRoundMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateRoundMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateRoundMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"updateRoundStartTime"`.
 */
export function usePrepareDummyRoundImplementationUpdateRoundStartTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationABI,
      "updateRoundStartTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "updateRoundStartTime",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "updateRoundStartTime"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareDummyRoundImplementationVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundImplementationABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationABI,
    "vote"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function useDummyRoundImplementationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    ...config,
  } as UseContractEventConfig<typeof dummyRoundImplementationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"ApplicationMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationApplicationMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "ApplicationMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "ApplicationMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "ApplicationMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"ApplicationsEndTimeUpdated"`.
 */
export function useDummyRoundImplementationApplicationsEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "ApplicationsEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "ApplicationsEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "ApplicationsEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"ApplicationsStartTimeUpdated"`.
 */
export function useDummyRoundImplementationApplicationsStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "ApplicationsStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "ApplicationsStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "ApplicationsStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyRoundImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"NewProjectApplication"`.
 */
export function useDummyRoundImplementationNewProjectApplicationEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "NewProjectApplication"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "NewProjectApplication",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "NewProjectApplication"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"ProjectsMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationProjectsMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "ProjectsMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "ProjectsMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "ProjectsMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useDummyRoundImplementationRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useDummyRoundImplementationRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useDummyRoundImplementationRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoundEndTimeUpdated"`.
 */
export function useDummyRoundImplementationRoundEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "RoundEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoundEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoundEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoundMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationRoundMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "RoundMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoundMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoundMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__ and `eventName` set to `"RoundStartTimeUpdated"`.
 */
export function useDummyRoundImplementationRoundStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationABI,
      "RoundStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationABI,
    eventName: "RoundStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationABI,
    "RoundStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function useDummyRoundImplementationV1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useDummyRoundImplementationV1DefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useDummyRoundImplementationV1RoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"VERSION"`.
 */
export function useDummyRoundImplementationV1Version<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"applicationMetaPtr"`.
 */
export function useDummyRoundImplementationV1ApplicationMetaPtr<
  TFunctionName extends "applicationMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "applicationMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"applicationsEndTime"`.
 */
export function useDummyRoundImplementationV1ApplicationsEndTime<
  TFunctionName extends "applicationsEndTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "applicationsEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"applicationsStartTime"`.
 */
export function useDummyRoundImplementationV1ApplicationsStartTime<
  TFunctionName extends "applicationsStartTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "applicationsStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useDummyRoundImplementationV1GetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useDummyRoundImplementationV1GetRoleMember<
  TFunctionName extends "getRoleMember",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useDummyRoundImplementationV1GetRoleMemberCount<
  TFunctionName extends "getRoleMemberCount",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"hasRole"`.
 */
export function useDummyRoundImplementationV1HasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"matchAmount"`.
 */
export function useDummyRoundImplementationV1MatchAmount<
  TFunctionName extends "matchAmount",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "matchAmount",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"payoutStrategy"`.
 */
export function useDummyRoundImplementationV1PayoutStrategy<
  TFunctionName extends "payoutStrategy",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "payoutStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"projectsMetaPtr"`.
 */
export function useDummyRoundImplementationV1ProjectsMetaPtr<
  TFunctionName extends "projectsMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "projectsMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundEndTime"`.
 */
export function useDummyRoundImplementationV1RoundEndTime<
  TFunctionName extends "roundEndTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundEndTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundFactory"`.
 */
export function useDummyRoundImplementationV1RoundFactory<
  TFunctionName extends "roundFactory",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundFactory",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundFeeAddress"`.
 */
export function useDummyRoundImplementationV1RoundFeeAddress<
  TFunctionName extends "roundFeeAddress",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundFeeAddress",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundFeePercentage"`.
 */
export function useDummyRoundImplementationV1RoundFeePercentage<
  TFunctionName extends "roundFeePercentage",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundFeePercentage",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundMetaPtr"`.
 */
export function useDummyRoundImplementationV1RoundMetaPtr<
  TFunctionName extends "roundMetaPtr",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"roundStartTime"`.
 */
export function useDummyRoundImplementationV1RoundStartTime<
  TFunctionName extends "roundStartTime",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "roundStartTime",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDummyRoundImplementationV1SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"token"`.
 */
export function useDummyRoundImplementationV1Token<
  TFunctionName extends "token",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"votingStrategy"`.
 */
export function useDummyRoundImplementationV1VotingStrategy<
  TFunctionName extends "votingStrategy",
  TSelectData = ReadContractResult<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyRoundImplementationV1ABI,
    functionName: "votingStrategy",
    ...config,
  } as UseContractReadConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function useDummyRoundImplementationV1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName,
    TMode
  >({ abi: dummyRoundImplementationV1ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"applyToRound"`.
 */
export function useDummyRoundImplementationV1ApplyToRound<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "applyToRound"
        >["request"]["abi"],
        "applyToRound",
        TMode
      > & { functionName?: "applyToRound" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "applyToRound",
        TMode
      > & {
        abi?: never;
        functionName?: "applyToRound";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "applyToRound",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "applyToRound",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"grantRole"`.
 */
export function useDummyRoundImplementationV1GrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "grantRole",
        TMode
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "grantRole",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"initialize"`.
 */
export function useDummyRoundImplementationV1Initialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "initialize",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useDummyRoundImplementationV1RenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "renounceRole",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "renounceRole",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useDummyRoundImplementationV1RevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "revokeRole",
        TMode
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "revokeRole",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useDummyRoundImplementationV1SetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "setReadyForPayout",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function useDummyRoundImplementationV1UpdateApplicationMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateApplicationMetaPtr"
        >["request"]["abi"],
        "updateApplicationMetaPtr",
        TMode
      > & { functionName?: "updateApplicationMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateApplicationMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateApplicationMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateApplicationMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function useDummyRoundImplementationV1UpdateMatchAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateMatchAmount"
        >["request"]["abi"],
        "updateMatchAmount",
        TMode
      > & { functionName?: "updateMatchAmount" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateMatchAmount",
        TMode
      > & {
        abi?: never;
        functionName?: "updateMatchAmount";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateMatchAmount",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateMatchAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateProjectsMetaPtr"`.
 */
export function useDummyRoundImplementationV1UpdateProjectsMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateProjectsMetaPtr"
        >["request"]["abi"],
        "updateProjectsMetaPtr",
        TMode
      > & { functionName?: "updateProjectsMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateProjectsMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateProjectsMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateProjectsMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateProjectsMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function useDummyRoundImplementationV1UpdateRoundFeeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateRoundFeeAddress"
        >["request"]["abi"],
        "updateRoundFeeAddress",
        TMode
      > & { functionName?: "updateRoundFeeAddress" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateRoundFeeAddress",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeeAddress";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundFeeAddress",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function useDummyRoundImplementationV1UpdateRoundFeePercentage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateRoundFeePercentage"
        >["request"]["abi"],
        "updateRoundFeePercentage",
        TMode
      > & { functionName?: "updateRoundFeePercentage" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateRoundFeePercentage",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundFeePercentage";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundFeePercentage",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function useDummyRoundImplementationV1UpdateRoundMetaPtr<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateRoundMetaPtr"
        >["request"]["abi"],
        "updateRoundMetaPtr",
        TMode
      > & { functionName?: "updateRoundMetaPtr" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateRoundMetaPtr",
        TMode
      > & {
        abi?: never;
        functionName?: "updateRoundMetaPtr";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundMetaPtr",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function useDummyRoundImplementationV1UpdateStartAndEndTimes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "updateStartAndEndTimes"
        >["request"]["abi"],
        "updateStartAndEndTimes",
        TMode
      > & { functionName?: "updateStartAndEndTimes" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "updateStartAndEndTimes",
        TMode
      > & {
        abi?: never;
        functionName?: "updateStartAndEndTimes";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "updateStartAndEndTimes",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"vote"`.
 */
export function useDummyRoundImplementationV1Vote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "vote",
        TMode
      > & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<typeof dummyRoundImplementationV1ABI, "vote", TMode>({
    abi: dummyRoundImplementationV1ABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"withdraw"`.
 */
export function useDummyRoundImplementationV1Withdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyRoundImplementationV1ABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<
        typeof dummyRoundImplementationV1ABI,
        "withdraw",
        TMode
      > & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<
    typeof dummyRoundImplementationV1ABI,
    "withdraw",
    TMode
  >({
    abi: dummyRoundImplementationV1ABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function usePrepareDummyRoundImplementationV1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"applyToRound"`.
 */
export function usePrepareDummyRoundImplementationV1ApplyToRound(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "applyToRound"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "applyToRound",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "applyToRound"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareDummyRoundImplementationV1GrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "grantRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDummyRoundImplementationV1Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareDummyRoundImplementationV1RenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "renounceRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareDummyRoundImplementationV1RevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "revokeRole"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareDummyRoundImplementationV1SetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateApplicationMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateApplicationMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateApplicationMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateApplicationMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateApplicationMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateMatchAmount"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateMatchAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateMatchAmount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateMatchAmount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateMatchAmount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateProjectsMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateProjectsMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateProjectsMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateProjectsMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateProjectsMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundFeeAddress"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateRoundFeeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateRoundFeeAddress"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundFeeAddress",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundFeeAddress"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundFeePercentage"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateRoundFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateRoundFeePercentage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundFeePercentage"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateRoundMetaPtr"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateRoundMetaPtr(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateRoundMetaPtr"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateRoundMetaPtr",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateRoundMetaPtr"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"updateStartAndEndTimes"`.
 */
export function usePrepareDummyRoundImplementationV1UpdateStartAndEndTimes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "updateStartAndEndTimes"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "updateStartAndEndTimes",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "updateStartAndEndTimes"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareDummyRoundImplementationV1Vote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyRoundImplementationV1ABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "vote"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareDummyRoundImplementationV1Withdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dummyRoundImplementationV1ABI,
      "withdraw"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyRoundImplementationV1ABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyRoundImplementationV1ABI,
    "withdraw"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function useDummyRoundImplementationV1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationV1ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"ApplicationMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationV1ApplicationMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "ApplicationMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "ApplicationMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "ApplicationMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"ApplicationsEndTimeUpdated"`.
 */
export function useDummyRoundImplementationV1ApplicationsEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "ApplicationsEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "ApplicationsEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "ApplicationsEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"ApplicationsStartTimeUpdated"`.
 */
export function useDummyRoundImplementationV1ApplicationsStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "ApplicationsStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "ApplicationsStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "ApplicationsStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDummyRoundImplementationV1InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationV1ABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"MatchAmountUpdated"`.
 */
export function useDummyRoundImplementationV1MatchAmountUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "MatchAmountUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "MatchAmountUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "MatchAmountUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"NewProjectApplication"`.
 */
export function useDummyRoundImplementationV1NewProjectApplicationEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "NewProjectApplication"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "NewProjectApplication",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "NewProjectApplication"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"PayFeeAndEscrowFundsToPayoutContract"`.
 */
export function useDummyRoundImplementationV1PayFeeAndEscrowFundsToPayoutContractEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "PayFeeAndEscrowFundsToPayoutContract"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "PayFeeAndEscrowFundsToPayoutContract",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "PayFeeAndEscrowFundsToPayoutContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"ProjectsMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationV1ProjectsMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "ProjectsMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "ProjectsMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "ProjectsMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useDummyRoundImplementationV1RoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoleAdminChanged"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useDummyRoundImplementationV1RoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationV1ABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoleGranted"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useDummyRoundImplementationV1RoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyRoundImplementationV1ABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoleRevoked"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoundEndTimeUpdated"`.
 */
export function useDummyRoundImplementationV1RoundEndTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoundEndTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoundEndTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoundEndTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoundFeeAddressUpdated"`.
 */
export function useDummyRoundImplementationV1RoundFeeAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoundFeeAddressUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoundFeeAddressUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoundFeeAddressUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoundFeePercentageUpdated"`.
 */
export function useDummyRoundImplementationV1RoundFeePercentageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoundFeePercentageUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoundFeePercentageUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoundFeePercentageUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoundMetaPtrUpdated"`.
 */
export function useDummyRoundImplementationV1RoundMetaPtrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoundMetaPtrUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoundMetaPtrUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoundMetaPtrUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__ and `eventName` set to `"RoundStartTimeUpdated"`.
 */
export function useDummyRoundImplementationV1RoundStartTimeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dummyRoundImplementationV1ABI,
      "RoundStartTimeUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyRoundImplementationV1ABI,
    eventName: "RoundStartTimeUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof dummyRoundImplementationV1ABI,
    "RoundStartTimeUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"nonce"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryNonce<
  TFunctionName extends "nonce",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "nonce",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"payoutImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryPayoutImplementation<
  TFunctionName extends "payoutImplementation",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "payoutImplementation",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName,
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryCreate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "create" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        "create",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    "create",
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    "initialize",
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    "renounceOwnership",
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    "transferOwnership",
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"updatePayoutImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryUpdatePayoutImplementation<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyFactoryABI,
          "updatePayoutImplementation"
        >["request"]["abi"],
        "updatePayoutImplementation",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updatePayoutImplementation";
      }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyFactoryABI,
        "updatePayoutImplementation",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updatePayoutImplementation";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyFactoryABI,
    "updatePayoutImplementation",
    TMode
  >({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "updatePayoutImplementation",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      TFunctionName
    >,
    "abi" | "address"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      "create"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    "create"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      "initialize"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      "renounceOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      "transferOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `functionName` set to `"updatePayoutImplementation"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function usePrepareMerklePayoutStrategyFactoryUpdatePayoutImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyFactoryABI,
      "updatePayoutImplementation"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    functionName: "updatePayoutImplementation",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyFactoryABI,
    "updatePayoutImplementation"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof merklePayoutStrategyFactoryABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyFactoryABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyFactoryABI,
      "Initialized"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyFactoryABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyFactoryABI,
      "OwnershipTransferred"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyFactoryABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `eventName` set to `"PayoutContractCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryPayoutContractCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyFactoryABI,
      "PayoutContractCreated"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    eventName: "PayoutContractCreated",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyFactoryABI,
    "PayoutContractCreated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__ and `eventName` set to `"PayoutImplementationUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function useMerklePayoutStrategyFactoryPayoutImplementationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyFactoryABI,
      "PayoutImplementationUpdated"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    eventName: "PayoutImplementationUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyFactoryABI,
    "PayoutImplementationUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function useMerklePayoutStrategyImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"ROUND_OPERATOR_ROLE"`.
 */
export function useMerklePayoutStrategyImplementationRoundOperatorRole<
  TFunctionName extends "ROUND_OPERATOR_ROLE",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "ROUND_OPERATOR_ROLE",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"VERSION"`.
 */
export function useMerklePayoutStrategyImplementationVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"distributionMetaPtr"`.
 */
export function useMerklePayoutStrategyImplementationDistributionMetaPtr<
  TFunctionName extends "distributionMetaPtr",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "distributionMetaPtr",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"hasBeenDistributed"`.
 */
export function useMerklePayoutStrategyImplementationHasBeenDistributed<
  TFunctionName extends "hasBeenDistributed",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "hasBeenDistributed",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"isDistributionSet"`.
 */
export function useMerklePayoutStrategyImplementationIsDistributionSet<
  TFunctionName extends "isDistributionSet",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "isDistributionSet",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"isReadyForPayout"`.
 */
export function useMerklePayoutStrategyImplementationIsReadyForPayout<
  TFunctionName extends "isReadyForPayout",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "isReadyForPayout",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"merkleRoot"`.
 */
export function useMerklePayoutStrategyImplementationMerkleRoot<
  TFunctionName extends "merkleRoot",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "merkleRoot",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"roundAddress"`.
 */
export function useMerklePayoutStrategyImplementationRoundAddress<
  TFunctionName extends "roundAddress",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "roundAddress",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"tokenAddress"`.
 */
export function useMerklePayoutStrategyImplementationTokenAddress<
  TFunctionName extends "tokenAddress",
  TSelectData = ReadContractResult<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "tokenAddress",
    ...config,
  } as UseContractReadConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function useMerklePayoutStrategyImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName,
    TMode
  >({ abi: merklePayoutStrategyImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"init"`.
 */
export function useMerklePayoutStrategyImplementationInit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "init"
        >["request"]["abi"],
        "init",
        TMode
      > & { functionName?: "init" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "init",
        TMode
      > & {
        abi?: never;
        functionName?: "init";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "init",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "init",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useMerklePayoutStrategyImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "initialize",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"payout"`.
 */
export function useMerklePayoutStrategyImplementationPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "payout"
        >["request"]["abi"],
        "payout",
        TMode
      > & { functionName?: "payout" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "payout",
        TMode
      > & {
        abi?: never;
        functionName?: "payout";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "payout",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "payout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function useMerklePayoutStrategyImplementationSetReadyForPayout<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "setReadyForPayout"
        >["request"]["abi"],
        "setReadyForPayout",
        TMode
      > & { functionName?: "setReadyForPayout" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "setReadyForPayout",
        TMode
      > & {
        abi?: never;
        functionName?: "setReadyForPayout";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "setReadyForPayout",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"updateDistribution"`.
 */
export function useMerklePayoutStrategyImplementationUpdateDistribution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "updateDistribution"
        >["request"]["abi"],
        "updateDistribution",
        TMode
      > & { functionName?: "updateDistribution" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "updateDistribution",
        TMode
      > & {
        abi?: never;
        functionName?: "updateDistribution";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "updateDistribution",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "updateDistribution",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function useMerklePayoutStrategyImplementationWithdrawFunds<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof merklePayoutStrategyImplementationABI,
          "withdrawFunds"
        >["request"]["abi"],
        "withdrawFunds",
        TMode
      > & { functionName?: "withdrawFunds" }
    : UseContractWriteConfig<
        typeof merklePayoutStrategyImplementationABI,
        "withdrawFunds",
        TMode
      > & {
        abi?: never;
        functionName?: "withdrawFunds";
      } = {} as any,
) {
  return useContractWrite<
    typeof merklePayoutStrategyImplementationABI,
    "withdrawFunds",
    TMode
  >({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "withdrawFunds",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function usePrepareMerklePayoutStrategyImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareMerklePayoutStrategyImplementationInit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "init"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "init",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "init"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMerklePayoutStrategyImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"payout"`.
 */
export function usePrepareMerklePayoutStrategyImplementationPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "payout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "payout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "payout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"setReadyForPayout"`.
 */
export function usePrepareMerklePayoutStrategyImplementationSetReadyForPayout(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "setReadyForPayout"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "setReadyForPayout",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "setReadyForPayout"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"updateDistribution"`.
 */
export function usePrepareMerklePayoutStrategyImplementationUpdateDistribution(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "updateDistribution"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "updateDistribution",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "updateDistribution"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function usePrepareMerklePayoutStrategyImplementationWithdrawFunds(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof merklePayoutStrategyImplementationABI,
      "withdrawFunds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: merklePayoutStrategyImplementationABI,
    functionName: "withdrawFunds",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof merklePayoutStrategyImplementationABI,
    "withdrawFunds"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function useMerklePayoutStrategyImplementationEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      TEventName
    >,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"BatchPayoutSuccessful"`.
 */
export function useMerklePayoutStrategyImplementationBatchPayoutSuccessfulEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "BatchPayoutSuccessful"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "BatchPayoutSuccessful",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "BatchPayoutSuccessful"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"DistributionUpdated"`.
 */
export function useMerklePayoutStrategyImplementationDistributionUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "DistributionUpdated"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "DistributionUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "DistributionUpdated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"FundsDistributed"`.
 */
export function useMerklePayoutStrategyImplementationFundsDistributedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "FundsDistributed"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "FundsDistributed",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "FundsDistributed"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"FundsWithdrawn"`.
 */
export function useMerklePayoutStrategyImplementationFundsWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "FundsWithdrawn"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "FundsWithdrawn",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "FundsWithdrawn"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMerklePayoutStrategyImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "Initialized"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__ and `eventName` set to `"ReadyForPayout"`.
 */
export function useMerklePayoutStrategyImplementationReadyForPayoutEvent(
  config: Omit<
    UseContractEventConfig<
      typeof merklePayoutStrategyImplementationABI,
      "ReadyForPayout"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: merklePayoutStrategyImplementationABI,
    eventName: "ReadyForPayout",
    ...config,
  } as UseContractEventConfig<
    typeof merklePayoutStrategyImplementationABI,
    "ReadyForPayout"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"nonce"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryNonce<
  TFunctionName extends "nonce",
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "nonce",
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"votingContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryVotingContract<
  TFunctionName extends "votingContract",
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "votingContract",
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName,
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryCreate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          "create"
        >["request"]["abi"],
        "create",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "create" }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        "create",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "create",
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "initialize",
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "renounceOwnership",
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "transferOwnership",
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"updateVotingContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryUpdateVotingContract<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyFactoryABI,
          "updateVotingContract"
        >["request"]["abi"],
        "updateVotingContract",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "updateVotingContract";
      }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyFactoryABI,
        "updateVotingContract",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "updateVotingContract";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "updateVotingContract",
    TMode
  >({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "updateVotingContract",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TFunctionName
    >,
    "abi" | "address"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"create"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "create"
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "create"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "initialize"
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "renounceOwnership"
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "renounceOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "transferOwnership"
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "transferOwnership"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `functionName` set to `"updateVotingContract"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function usePrepareQuadraticFundingVotingStrategyFactoryUpdateVotingContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "updateVotingContract"
    >,
    "abi" | "address" | "functionName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    functionName: "updateVotingContract",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "updateVotingContract"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      TEventName
    >,
    "abi" | "address"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "Initialized"
    >,
    "abi" | "address" | "eventName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "OwnershipTransferred"
    >,
    "abi" | "address" | "eventName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "OwnershipTransferred"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `eventName` set to `"VotingContractCreated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryVotingContractCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "VotingContractCreated"
    >,
    "abi" | "address" | "eventName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    eventName: "VotingContractCreated",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "VotingContractCreated"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__ and `eventName` set to `"VotingContractUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function useQuadraticFundingVotingStrategyFactoryVotingContractUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyFactoryABI,
      "VotingContractUpdated"
    >,
    "abi" | "address" | "eventName"
  > & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  } = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    eventName: "VotingContractUpdated",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyFactoryABI,
    "VotingContractUpdated"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "approve", TMode>({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "decreaseAllowance", TMode> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "decreaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "increaseAllowance", TMode> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "increaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "transfer", TMode>({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "transferFrom", TMode>({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function useQuadraticFundingVotingStrategyImplementationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"VERSION"`.
 */
export function useQuadraticFundingVotingStrategyImplementationVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"roundAddress"`.
 */
export function useQuadraticFundingVotingStrategyImplementationRoundAddress<
  TFunctionName extends "roundAddress",
  TSelectData = ReadContractResult<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "roundAddress",
    ...config,
  } as UseContractReadConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function useQuadraticFundingVotingStrategyImplementationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyImplementationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyImplementationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName,
    TMode
  >({ abi: quadraticFundingVotingStrategyImplementationABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"init"`.
 */
export function useQuadraticFundingVotingStrategyImplementationInit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyImplementationABI,
          "init"
        >["request"]["abi"],
        "init",
        TMode
      > & { functionName?: "init" }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyImplementationABI,
        "init",
        TMode
      > & {
        abi?: never;
        functionName?: "init";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "init",
    TMode
  >({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "init",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function useQuadraticFundingVotingStrategyImplementationInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyImplementationABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyImplementationABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "initialize",
    TMode
  >({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function useQuadraticFundingVotingStrategyImplementationVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof quadraticFundingVotingStrategyImplementationABI,
          "vote"
        >["request"]["abi"],
        "vote",
        TMode
      > & { functionName?: "vote" }
    : UseContractWriteConfig<
        typeof quadraticFundingVotingStrategyImplementationABI,
        "vote",
        TMode
      > & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "vote",
    TMode
  >({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function usePrepareQuadraticFundingVotingStrategyImplementationWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareQuadraticFundingVotingStrategyImplementationInit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      "init"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "init",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "init"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareQuadraticFundingVotingStrategyImplementationInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "initialize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareQuadraticFundingVotingStrategyImplementationVote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      "vote"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: quadraticFundingVotingStrategyImplementationABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "vote"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function useQuadraticFundingVotingStrategyImplementationEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      TEventName
    >,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `eventName` set to `"Initialized"`.
 */
export function useQuadraticFundingVotingStrategyImplementationInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      "Initialized"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyImplementationABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "Initialized"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__ and `eventName` set to `"Voted"`.
 */
export function useQuadraticFundingVotingStrategyImplementationVotedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof quadraticFundingVotingStrategyImplementationABI,
      "Voted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: quadraticFundingVotingStrategyImplementationABI,
    eventName: "Voted",
    ...config,
  } as UseContractEventConfig<
    typeof quadraticFundingVotingStrategyImplementationABI,
    "Voted"
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "approve", TMode>({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "transfer", TMode>({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof ierc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "transferFrom", TMode>({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof initializableABI, "Initialized">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc20UpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, TFunctionName, TMode>({
    abi: ierc20UpgradeableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, "approve", TMode>({
    abi: ierc20UpgradeableABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20UpgradeableABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, "transfer", TMode>({
    abi: ierc20UpgradeableABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof ierc20UpgradeableABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20UpgradeableABI, "transferFrom", TMode>({
    abi: ierc20UpgradeableABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    "transferFrom"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "approve", TMode>({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "transfer", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "transferFrom", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends "DOMAIN_SEPARATOR",
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends "nonces",
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({
    abi: ierc20PermitABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          "permit"
        >["request"]["abi"],
        "permit",
        TMode
      > & { functionName?: "permit" }
    : UseContractWriteConfig<typeof ierc20PermitABI, "permit", TMode> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, "permit", TMode>({
    abi: ierc20PermitABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, "permit">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TFunctionName extends "DOMAIN_SEPARATOR",
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TFunctionName extends "nonces",
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc20PermitUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: ierc20PermitUpgradeableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          "permit"
        >["request"]["abi"],
        "permit",
        TMode
      > & { functionName?: "permit" }
    : UseContractWriteConfig<
        typeof ierc20PermitUpgradeableABI,
        "permit",
        TMode
      > & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitUpgradeableABI, "permit", TMode>({
    abi: ierc20PermitUpgradeableABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    "permit"
  >);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function getIPayoutStrategy(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iPayoutStrategyABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function readIPayoutStrategy<
  TAbi extends readonly unknown[] = typeof iPayoutStrategyABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: iPayoutStrategyABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function writeIPayoutStrategy<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iPayoutStrategyABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iPayoutStrategyABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: iPayoutStrategyABI,
    ...config,
  } as unknown as WriteContractArgs<typeof iPayoutStrategyABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function prepareWriteIPayoutStrategy<
  TAbi extends readonly unknown[] = typeof iPayoutStrategyABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iPayoutStrategyABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iPayoutStrategyABI}__.
 */
export function watchIPayoutStrategyEvent<
  TAbi extends readonly unknown[] = typeof iPayoutStrategyABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iPayoutStrategyABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__.
 */
export function getIPayoutStrategyFactory(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: iPayoutStrategyFactoryABI, ...config });
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__.
 */
export function writeIPayoutStrategyFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iPayoutStrategyFactoryABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iPayoutStrategyFactoryABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: iPayoutStrategyFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof iPayoutStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iPayoutStrategyFactoryABI}__.
 */
export function prepareWriteIPayoutStrategyFactory<
  TAbi extends readonly unknown[] = typeof iPayoutStrategyFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iPayoutStrategyFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function getMockErc20(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: mockErc20ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function readMockErc20<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: mockErc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function writeMockErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof mockErc20ABI, TFunctionName>, "abi">
    | Omit<
        WriteContractUnpreparedArgs<typeof mockErc20ABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: mockErc20ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof mockErc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function prepareWriteMockErc20<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: mockErc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function watchMockErc20Event<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: mockErc20ABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link mockRevertingReceiverABI}__.
 */
export function getMockRevertingReceiver(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: mockRevertingReceiverABI, ...config });
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function getMockRoundImplementation(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: mockRoundImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function readMockRoundImplementation<
  TAbi extends readonly unknown[] = typeof mockRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: mockRoundImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function writeMockRoundImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof mockRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof mockRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: mockRoundImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof mockRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function prepareWriteMockRoundImplementation<
  TAbi extends readonly unknown[] = typeof mockRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: mockRoundImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link mockRoundImplementationABI}__.
 */
export function watchMockRoundImplementationEvent<
  TAbi extends readonly unknown[] = typeof mockRoundImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: mockRoundImplementationABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function getProgramFactory(
  config: Omit<GetContractArgs, "abi" | "address"> & {
    chainId?: keyof typeof programFactoryAddress;
  },
) {
  return getContract({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function readProgramFactory<
  TAbi extends readonly unknown[] = typeof programFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi" | "address"> & {
    chainId?: keyof typeof programFactoryAddress;
  },
) {
  return readContract({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function writeProgramFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof programFactoryAddress,
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof programFactoryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof programFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof programFactoryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof programFactoryAddress;
      }),
) {
  return writeContract({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as unknown as WriteContractArgs<typeof programFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function prepareWriteProgramFactory<
  TAbi extends readonly unknown[] = typeof programFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof programFactoryAddress },
) {
  return prepareWriteContract({
    abi: programFactoryABI,
    address: programFactoryAddress[5],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link programFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function watchProgramFactoryEvent<
  TAbi extends readonly unknown[] = typeof programFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof programFactoryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: programFactoryABI,
      address: programFactoryAddress[5],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function getProgramImplementation(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: programImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function readProgramImplementation<
  TAbi extends readonly unknown[] = typeof programImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: programImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function writeProgramImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof programImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof programImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: programImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof programImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function prepareWriteProgramImplementation<
  TAbi extends readonly unknown[] = typeof programImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: programImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link programImplementationABI}__.
 */
export function watchProgramImplementationEvent<
  TAbi extends readonly unknown[] = typeof programImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: programImplementationABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function getProjectRegistry(
  config: Omit<GetContractArgs, "abi" | "address"> & {
    chainId?: keyof typeof projectRegistryAddress;
  },
) {
  return getContract({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function readProjectRegistry<
  TAbi extends readonly unknown[] = typeof projectRegistryABI,
  TFunctionName extends string = string,
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi" | "address"> & {
    chainId?: keyof typeof projectRegistryAddress;
  },
) {
  return readContract({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function writeProjectRegistry<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof projectRegistryAddress,
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof projectRegistryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof projectRegistryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof projectRegistryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof projectRegistryAddress;
      }),
) {
  return writeContract({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as unknown as WriteContractArgs<typeof projectRegistryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function prepareWriteProjectRegistry<
  TAbi extends readonly unknown[] = typeof projectRegistryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof projectRegistryAddress },
) {
  return prepareWriteContract({
    abi: projectRegistryABI,
    address: projectRegistryAddress[5],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link projectRegistryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xa71864fAd36439C50924359ECfF23Bb185FFDf21)
 */
export function watchProjectRegistryEvent<
  TAbi extends readonly unknown[] = typeof projectRegistryABI,
  TEventName extends string = string,
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof projectRegistryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: projectRegistryABI,
      address: projectRegistryAddress[5],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iRoundFactoryABI}__.
 */
export function getIRoundFactory(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iRoundFactoryABI, ...config });
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iRoundFactoryABI}__.
 */
export function writeIRoundFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iRoundFactoryABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iRoundFactoryABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: iRoundFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<typeof iRoundFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iRoundFactoryABI}__.
 */
export function prepareWriteIRoundFactory<
  TAbi extends readonly unknown[] = typeof iRoundFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iRoundFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function getIRoundImplementation(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iRoundImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function readIRoundImplementation<
  TAbi extends readonly unknown[] = typeof iRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: iRoundImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function writeIRoundImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: iRoundImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof iRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iRoundImplementationABI}__.
 */
export function prepareWriteIRoundImplementation<
  TAbi extends readonly unknown[] = typeof iRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iRoundImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function getRoundFactory(
  config: Omit<GetContractArgs, "abi" | "address"> & {
    chainId?: keyof typeof roundFactoryAddress;
  },
) {
  return getContract({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function readRoundFactory<
  TAbi extends readonly unknown[] = typeof roundFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi" | "address"> & {
    chainId?: keyof typeof roundFactoryAddress;
  },
) {
  return readContract({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function writeRoundFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof roundFactoryAddress,
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<typeof roundFactoryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof roundFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<typeof roundFactoryABI, TFunctionName>,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof roundFactoryAddress;
      }),
) {
  return writeContract({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as unknown as WriteContractArgs<typeof roundFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function prepareWriteRoundFactory<
  TAbi extends readonly unknown[] = typeof roundFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof roundFactoryAddress },
) {
  return prepareWriteContract({
    abi: roundFactoryABI,
    address: roundFactoryAddress[5],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link roundFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x24F9EBFAdf095e0afe3d98635ee83CD72e49B5B0)
 */
export function watchRoundFactoryEvent<
  TAbi extends readonly unknown[] = typeof roundFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof roundFactoryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: roundFactoryABI,
      address: roundFactoryAddress[5],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function getRoundImplementation(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: roundImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function readRoundImplementation<
  TAbi extends readonly unknown[] = typeof roundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: roundImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function writeRoundImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof roundImplementationABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof roundImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: roundImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof roundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function prepareWriteRoundImplementation<
  TAbi extends readonly unknown[] = typeof roundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: roundImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link roundImplementationABI}__.
 */
export function watchRoundImplementationEvent<
  TAbi extends readonly unknown[] = typeof roundImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: roundImplementationABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function getAlloSettings(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: alloSettingsABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function readAlloSettings<
  TAbi extends readonly unknown[] = typeof alloSettingsABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: alloSettingsABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function writeAlloSettings<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof alloSettingsABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof alloSettingsABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: alloSettingsABI,
    ...config,
  } as unknown as WriteContractArgs<typeof alloSettingsABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function prepareWriteAlloSettings<
  TAbi extends readonly unknown[] = typeof alloSettingsABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: alloSettingsABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link alloSettingsABI}__.
 */
export function watchAlloSettingsEvent<
  TAbi extends readonly unknown[] = typeof alloSettingsABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: alloSettingsABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function getIVotingStrategy(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iVotingStrategyABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function readIVotingStrategy<
  TAbi extends readonly unknown[] = typeof iVotingStrategyABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: iVotingStrategyABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function writeIVotingStrategy<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iVotingStrategyABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iVotingStrategyABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: iVotingStrategyABI,
    ...config,
  } as unknown as WriteContractArgs<typeof iVotingStrategyABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iVotingStrategyABI}__.
 */
export function prepareWriteIVotingStrategy<
  TAbi extends readonly unknown[] = typeof iVotingStrategyABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iVotingStrategyABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__.
 */
export function getIVotingStrategyFactory(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: iVotingStrategyFactoryABI, ...config });
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__.
 */
export function writeIVotingStrategyFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iVotingStrategyFactoryABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iVotingStrategyFactoryABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: iVotingStrategyFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof iVotingStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iVotingStrategyFactoryABI}__.
 */
export function prepareWriteIVotingStrategyFactory<
  TAbi extends readonly unknown[] = typeof iVotingStrategyFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iVotingStrategyFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function getAccessControl(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: accessControlABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function readAccessControl<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: accessControlABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function writeAccessControl<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof accessControlABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof accessControlABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: accessControlABI,
    ...config,
  } as unknown as WriteContractArgs<typeof accessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function prepareWriteAccessControl<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: accessControlABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function watchAccessControlEvent<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: accessControlABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function getAccessControlEnumerable(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: accessControlEnumerableABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function readAccessControlEnumerable<
  TAbi extends readonly unknown[] = typeof accessControlEnumerableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: accessControlEnumerableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function writeAccessControlEnumerable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof accessControlEnumerableABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof accessControlEnumerableABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: accessControlEnumerableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof accessControlEnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function prepareWriteAccessControlEnumerable<
  TAbi extends readonly unknown[] = typeof accessControlEnumerableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: accessControlEnumerableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function watchAccessControlEnumerableEvent<
  TAbi extends readonly unknown[] = typeof accessControlEnumerableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: accessControlEnumerableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function getIAccessControl(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iAccessControlABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function readIAccessControl<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: iAccessControlABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function writeIAccessControl<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iAccessControlABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iAccessControlABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: iAccessControlABI,
    ...config,
  } as unknown as WriteContractArgs<typeof iAccessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function prepareWriteIAccessControl<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iAccessControlABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function watchIAccessControlEvent<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iAccessControlABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function getIAccessControlEnumerable(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: iAccessControlEnumerableABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function readIAccessControlEnumerable<
  TAbi extends readonly unknown[] = typeof iAccessControlEnumerableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function writeIAccessControlEnumerable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iAccessControlEnumerableABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iAccessControlEnumerableABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function prepareWriteIAccessControlEnumerable<
  TAbi extends readonly unknown[] = typeof iAccessControlEnumerableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function watchIAccessControlEnumerableEvent<
  TAbi extends readonly unknown[] = typeof iAccessControlEnumerableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iAccessControlEnumerableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function getOwnableUpgradeable(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ownableUpgradeableABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function readOwnableUpgradeable<
  TAbi extends readonly unknown[] = typeof ownableUpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ownableUpgradeableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function writeOwnableUpgradeable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ownableUpgradeableABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof ownableUpgradeableABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: ownableUpgradeableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof ownableUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function prepareWriteOwnableUpgradeable<
  TAbi extends readonly unknown[] = typeof ownableUpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ownableUpgradeableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function watchOwnableUpgradeableEvent<
  TAbi extends readonly unknown[] = typeof ownableUpgradeableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ownableUpgradeableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function getReentrancyGuardUpgradeable(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: reentrancyGuardUpgradeableABI, ...config });
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function watchReentrancyGuardUpgradeableEvent<
  TAbi extends readonly unknown[] = typeof reentrancyGuardUpgradeableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: reentrancyGuardUpgradeableABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function getContextUpgradeable(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: contextUpgradeableABI, ...config });
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function watchContextUpgradeableEvent<
  TAbi extends readonly unknown[] = typeof contextUpgradeableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: contextUpgradeableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function getMulticallUpgradeable(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: multicallUpgradeableABI, ...config });
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function writeMulticallUpgradeable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof multicallUpgradeableABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof multicallUpgradeableABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: multicallUpgradeableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof multicallUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function prepareWriteMulticallUpgradeable<
  TAbi extends readonly unknown[] = typeof multicallUpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: multicallUpgradeableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link multicallUpgradeableABI}__.
 */
export function watchMulticallUpgradeableEvent<
  TAbi extends readonly unknown[] = typeof multicallUpgradeableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: multicallUpgradeableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function getDummyProgramFactory(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: dummyProgramFactoryABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function readDummyProgramFactory<
  TAbi extends readonly unknown[] = typeof dummyProgramFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyProgramFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function writeDummyProgramFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof dummyProgramFactoryABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof dummyProgramFactoryABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyProgramFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyProgramFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function prepareWriteDummyProgramFactory<
  TAbi extends readonly unknown[] = typeof dummyProgramFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyProgramFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyProgramFactoryABI}__.
 */
export function watchDummyProgramFactoryEvent<
  TAbi extends readonly unknown[] = typeof dummyProgramFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: dummyProgramFactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function getDummyProgramImplementation(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: dummyProgramImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function readDummyProgramImplementation<
  TAbi extends readonly unknown[] = typeof dummyProgramImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyProgramImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function writeDummyProgramImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof dummyProgramImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof dummyProgramImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyProgramImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyProgramImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function prepareWriteDummyProgramImplementation<
  TAbi extends readonly unknown[] = typeof dummyProgramImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyProgramImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyProgramImplementationABI}__.
 */
export function watchDummyProgramImplementationEvent<
  TAbi extends readonly unknown[] = typeof dummyProgramImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: dummyProgramImplementationABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function getDummyRoundFactory(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: dummyRoundFactoryABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function readDummyRoundFactory<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyRoundFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function writeDummyRoundFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof dummyRoundFactoryABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof dummyRoundFactoryABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyRoundFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyRoundFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function prepareWriteDummyRoundFactory<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyRoundFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyRoundFactoryABI}__.
 */
export function watchDummyRoundFactoryEvent<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: dummyRoundFactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function getDummyRoundFactoryV1(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: dummyRoundFactoryV1ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function readDummyRoundFactoryV1<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryV1ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function writeDummyRoundFactoryV1<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof dummyRoundFactoryV1ABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof dummyRoundFactoryV1ABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyRoundFactoryV1ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function prepareWriteDummyRoundFactoryV1<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryV1ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyRoundFactoryV1ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyRoundFactoryV1ABI}__.
 */
export function watchDummyRoundFactoryV1Event<
  TAbi extends readonly unknown[] = typeof dummyRoundFactoryV1ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: dummyRoundFactoryV1ABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function getDummyRoundImplementation(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: dummyRoundImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function readDummyRoundImplementation<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyRoundImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function writeDummyRoundImplementation<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof dummyRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof dummyRoundImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyRoundImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyRoundImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function prepareWriteDummyRoundImplementation<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyRoundImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyRoundImplementationABI}__.
 */
export function watchDummyRoundImplementationEvent<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: dummyRoundImplementationABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function getDummyRoundImplementationV1(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: dummyRoundImplementationV1ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function readDummyRoundImplementationV1<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationV1ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function writeDummyRoundImplementationV1<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof dummyRoundImplementationV1ABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof dummyRoundImplementationV1ABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof dummyRoundImplementationV1ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function prepareWriteDummyRoundImplementationV1<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationV1ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: dummyRoundImplementationV1ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link dummyRoundImplementationV1ABI}__.
 */
export function watchDummyRoundImplementationV1Event<
  TAbi extends readonly unknown[] = typeof dummyRoundImplementationV1ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: dummyRoundImplementationV1ABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function getMerklePayoutStrategyFactory(
  config: Omit<GetContractArgs, "abi" | "address"> & {
    chainId?: keyof typeof merklePayoutStrategyFactoryAddress;
  },
) {
  return getContract({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function readMerklePayoutStrategyFactory<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi" | "address"> & {
    chainId?: keyof typeof merklePayoutStrategyFactoryAddress;
  },
) {
  return readContract({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function writeMerklePayoutStrategyFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof merklePayoutStrategyFactoryAddress,
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<
          typeof merklePayoutStrategyFactoryABI,
          TFunctionName
        >,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof merklePayoutStrategyFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<
          typeof merklePayoutStrategyFactoryABI,
          TFunctionName
        >,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof merklePayoutStrategyFactoryAddress;
      }),
) {
  return writeContract({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as unknown as WriteContractArgs<
    typeof merklePayoutStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function prepareWriteMerklePayoutStrategyFactory<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress },
) {
  return prepareWriteContract({
    abi: merklePayoutStrategyFactoryABI,
    address: merklePayoutStrategyFactoryAddress[5],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link merklePayoutStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xE2Bf906f7d10F059cE65769F53fe50D8E0cC7cBe)
 */
export function watchMerklePayoutStrategyFactoryEvent<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof merklePayoutStrategyFactoryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: merklePayoutStrategyFactoryABI,
      address: merklePayoutStrategyFactoryAddress[5],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function getMerklePayoutStrategyImplementation(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: merklePayoutStrategyImplementationABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function readMerklePayoutStrategyImplementation<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function writeMerklePayoutStrategyImplementation<
  TFunctionName extends string,
>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof merklePayoutStrategyImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof merklePayoutStrategyImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof merklePayoutStrategyImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function prepareWriteMerklePayoutStrategyImplementation<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: merklePayoutStrategyImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link merklePayoutStrategyImplementationABI}__.
 */
export function watchMerklePayoutStrategyImplementationEvent<
  TAbi extends readonly unknown[] = typeof merklePayoutStrategyImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: merklePayoutStrategyImplementationABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function getQuadraticFundingVotingStrategyFactory(
  config: Omit<GetContractArgs, "abi" | "address"> & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  },
) {
  return getContract({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function readQuadraticFundingVotingStrategyFactory<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi" | "address"> & {
    chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress;
  },
) {
  return readContract({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function writeQuadraticFundingVotingStrategyFactory<
  TFunctionName extends string,
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof quadraticFundingVotingStrategyFactoryAddress,
>(
  config:
    | (Omit<
        WriteContractPreparedArgs<
          typeof quadraticFundingVotingStrategyFactoryABI,
          TFunctionName
        >,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof quadraticFundingVotingStrategyFactoryAddress;
      })
    | (Omit<
        WriteContractUnpreparedArgs<
          typeof quadraticFundingVotingStrategyFactoryABI,
          TFunctionName
        >,
        "abi" | "address"
      > & {
        mode: TMode;
        chainId?: TMode extends "prepared"
          ? TChainId
          : keyof typeof quadraticFundingVotingStrategyFactoryAddress;
      }),
) {
  return writeContract({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as unknown as WriteContractArgs<
    typeof quadraticFundingVotingStrategyFactoryABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function prepareWriteQuadraticFundingVotingStrategyFactory<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress },
) {
  return prepareWriteContract({
    abi: quadraticFundingVotingStrategyFactoryABI,
    address: quadraticFundingVotingStrategyFactoryAddress[5],
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyFactoryABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x06A6Cc566c5A88E77B1353Cdc3110C2e6c828e38)
 */
export function watchQuadraticFundingVotingStrategyFactoryEvent<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<
    WatchContractEventConfig<TAbi, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof quadraticFundingVotingStrategyFactoryAddress },
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: quadraticFundingVotingStrategyFactoryABI,
      address: quadraticFundingVotingStrategyFactoryAddress[5],
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function getErc20(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function readErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: erc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function writeErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc20ABI, TFunctionName>, "abi">
    | Omit<WriteContractUnpreparedArgs<typeof erc20ABI, TFunctionName>, "abi">,
) {
  return writeContract({
    abi: erc20ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function prepareWriteErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: erc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function watchErc20Event<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: erc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function getQuadraticFundingVotingStrategyImplementation(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function readQuadraticFundingVotingStrategyImplementation<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function writeQuadraticFundingVotingStrategyImplementation<
  TFunctionName extends string,
>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof quadraticFundingVotingStrategyImplementationABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof quadraticFundingVotingStrategyImplementationABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof quadraticFundingVotingStrategyImplementationABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function prepareWriteQuadraticFundingVotingStrategyImplementation<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyImplementationABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: quadraticFundingVotingStrategyImplementationABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link quadraticFundingVotingStrategyImplementationABI}__.
 */
export function watchQuadraticFundingVotingStrategyImplementationEvent<
  TAbi extends readonly unknown[] = typeof quadraticFundingVotingStrategyImplementationABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: quadraticFundingVotingStrategyImplementationABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function getIerc20(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ierc20ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function readIerc20<
  TAbi extends readonly unknown[] = typeof ierc20ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function writeIerc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc20ABI, TFunctionName>, "abi">
    | Omit<WriteContractUnpreparedArgs<typeof ierc20ABI, TFunctionName>, "abi">,
) {
  return writeContract({
    abi: ierc20ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof ierc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function prepareWriteIerc20<
  TAbi extends readonly unknown[] = typeof ierc20ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ierc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function watchIerc20Event<
  TAbi extends readonly unknown[] = typeof ierc20ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ierc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function getErc165(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: erc165ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function readErc165<
  TAbi extends readonly unknown[] = typeof erc165ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: erc165ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function getIerc165(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ierc165ABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function readIerc165<
  TAbi extends readonly unknown[] = typeof ierc165ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc165ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link initializableABI}__.
 */
export function getInitializable(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: initializableABI, ...config });
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function watchInitializableEvent<
  TAbi extends readonly unknown[] = typeof initializableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: initializableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function getIerc20Upgradeable(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ierc20UpgradeableABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function readIerc20Upgradeable<
  TAbi extends readonly unknown[] = typeof ierc20UpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc20UpgradeableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function writeIerc20Upgradeable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ierc20UpgradeableABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof ierc20UpgradeableABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: ierc20UpgradeableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function prepareWriteIerc20Upgradeable<
  TAbi extends readonly unknown[] = typeof ierc20UpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ierc20UpgradeableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function watchIerc20UpgradeableEvent<
  TAbi extends readonly unknown[] = typeof ierc20UpgradeableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ierc20UpgradeableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function getIerc20Metadata(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function readIerc20Metadata<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc20MetadataABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function writeIerc20Metadata<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ierc20MetadataABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof ierc20MetadataABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: ierc20MetadataABI,
    ...config,
  } as unknown as WriteContractArgs<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function prepareWriteIerc20Metadata<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ierc20MetadataABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function watchIerc20MetadataEvent<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ierc20MetadataABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  );
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function getIerc20Permit(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ierc20PermitABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function readIerc20Permit<
  TAbi extends readonly unknown[] = typeof ierc20PermitABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc20PermitABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function writeIerc20Permit<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ierc20PermitABI, TFunctionName>,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof ierc20PermitABI, TFunctionName>,
        "abi"
      >,
) {
  return writeContract({
    abi: ierc20PermitABI,
    ...config,
  } as unknown as WriteContractArgs<typeof ierc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function prepareWriteIerc20Permit<
  TAbi extends readonly unknown[] = typeof ierc20PermitABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ierc20PermitABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function getIerc20PermitUpgradeable(
  config: Omit<GetContractArgs, "abi">,
) {
  return getContract({ abi: ierc20PermitUpgradeableABI, ...config });
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function readIerc20PermitUpgradeable<
  TAbi extends readonly unknown[] = typeof ierc20PermitUpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function writeIerc20PermitUpgradeable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof ierc20PermitUpgradeableABI,
          TFunctionName
        >,
        "abi"
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof ierc20PermitUpgradeableABI,
          TFunctionName
        >,
        "abi"
      >,
) {
  return writeContract({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function prepareWriteIerc20PermitUpgradeable<
  TAbi extends readonly unknown[] = typeof ierc20PermitUpgradeableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
  return prepareWriteContract({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>);
}
